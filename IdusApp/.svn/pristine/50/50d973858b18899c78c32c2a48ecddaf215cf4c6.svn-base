package com.gvs.controladores;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

import com.gvs.exceptiones.ExceptionCobranza;
import com.gvs.utilidades.BaseDeDatos;
import com.gvs.utilidades.Funciones;
import com.gvs.utilidades.Gain;


public class ControladorCobranza {
	private Context conte;
	private Funciones funcion = new Funciones();
	
	public ControladorCobranza(Context cont) {
		conte=cont;
	}
	
	
	public List<Gain> buscarCobranzas() throws ExceptionCobranza{
		try{
			List<Gain> list_gain = new ArrayList<Gain>();
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql = "SELECT * FROM COBRANZA WHERE ESTADO=0";
			Cursor cur = db.rawQuery(Sql, null);
			if (cur.getColumnCount()>0){
				while (cur.moveToNext()){
					 Gain gain=new Gain();
					 gain.setClase(cur.getString(cur.getColumnIndex("CLASE")));
		     		 gain.setTipo(cur.getString(cur.getColumnIndex("TIPO")));
		     		 gain.setSucursal(cur.getInt(cur.getColumnIndex("SUCURSAL")));
		     		 gain.setNumero_comprobante(cur.getInt(cur.getColumnIndex("NUMERO")));
		     		 gain.setNumero_recibo(cur.getInt(cur.getColumnIndex("RECIBO")));
		     		 gain.setImporte_pagado(cur.getDouble(cur.getColumnIndex("IMPORTEPAGADO")));
		     		 gain.setSaldo(cur.getDouble(cur.getColumnIndex("SALDO")));
		     		 gain.setFecha(cur.getLong(cur.getColumnIndex("FECHA")));
		     		 gain.setEstado(cur.getInt(cur.getColumnIndex("ESTADO")));
		     		 gain.setCodigo_cliente(cur.getInt(cur.getColumnIndex("CODIGOCLIENTE")));
		     		 gain.setCodigo_vendedor(cur.getInt(cur.getColumnIndex("CODIGOVENDEDOR")));
		     		 list_gain.add(gain);
				}
			}
			return list_gain;
		} catch (Exception e) {
			e.printStackTrace();
			throw new ExceptionCobranza(e.getMessage());
		}
	}
	
	
	public int buscarComprobantesPagados(int cliente,int periodo){
		try{
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			Date fecha=new Date();	
			Date antes=new Date();          
            Calendar calendar_hasta = Calendar.getInstance();
            calendar_hasta.setTime(fecha);//Seteamos el calendario con la fecha seleccionada
            calendar_hasta.add(Calendar.DATE, -periodo);//Agregamos 1 dia para que la consulta sea menor al dia siguiente
            antes = calendar_hasta.getTime();
			String Sql = "SELECT * FROM COBRANZA WHERE  CODIGOCLIENTE=" + cliente +" AND FECHA<"+fecha.getTime()+" AND FECHA>"+antes.getTime();
			Cursor cur = db.rawQuery(Sql, null);
			int contador=0;
			if (cur.getColumnCount()>0){
				while (cur.moveToNext()){
					contador++;
				}
			}
			return contador;
		} catch (Exception e) {
			e.printStackTrace();
			return 0;
		}
	}
	/*public double buscarCobranzaPorComprobante(Voucher voucher){
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();
		String Sql = "SELECT * FROM COBRANZA WHERE CLASE='"+voucher.getClase()+"' AND TIPO='"+voucher.getTipo()+"' AND SUCURSAL="+voucher.getSucursal()+" AND NUMERO="+voucher.getNumero();
		Cursor cur = db.rawQuery(Sql, null);
		double pagado=0;
		if (cur.getColumnCount()>0){
			while (cur.moveToNext()){
	     		pagado=pagado+ cur.getDouble(cur.getColumnIndex("IMPORTEPAGADO"));
			}
		}
		return pagado;
	}*/
	
}
