package com.gvs.busquedas;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.gvs.idusapp.R;
import com.gvs.utilidades.BaseDeDatos;
import com.gvs.utilidades.Funciones;
import com.gvs.utilidades.Order;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

public class BusquedaPedidos {
	
	private Context conte;
	private Funciones funcion = new Funciones();
	
	public BusquedaPedidos(Context cont) {
		conte=cont;		
	}
	
	public List<Map<String, String>> buscarPedidosXClienteYVendedor(int codigoCliente, int codigoVendedor){
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();
		
		String Sql = "SELECT NUMERO,NUMEROFINAL,FECHA,CANTIDADITEMS," +
				"(CASE WHEN ESTADO=0 THEN 'S/ENVIAR|FINAL' " +
				"WHEN ESTADO=10 THEN 'S/FINALIZAR|EDITABLE' " +
				"WHEN ESTADO=11 THEN 'LISTO PARA ENVIAR' " + 
				"WHEN ESTADO=12 THEN 'ERROR!!! AL ENVIAR' " +
				"WHEN ESTADO=1 THEN 'ENVIADO' " +
				"WHEN ESTADO=2 THEN 'ANULADO' END) AS ESTADO FROM PEDIDOSCABECERA WHERE CODIGOCLIENTE=" + codigoCliente + " AND CODIGOVENDEDOR="+ codigoVendedor + " AND ESTADO<90 ORDER BY NUMERO DESC";
		Cursor cur = db.rawQuery(Sql, null);
		if (cur.getCount()>0){
			List<Map<String, String>> list = new ArrayList <Map<String, String>>();
			while (cur.moveToNext()){
				Map<String, String> datum = new HashMap<String, String>();
				datum.put("DATO07",funcion.format(cur.getInt(cur.getColumnIndex("NUMERO")),10) + " - " + funcion.format(cur.getInt(cur.getColumnIndex("NUMEROFINAL")),10));
				datum.put("DATO08",funcion.dateToString_yyyymmdd_hhmm(cur.getLong(cur.getColumnIndex("FECHA"))) + " - " + funcion.format(cur.getInt(cur.getColumnIndex("CANTIDADITEMS")),2) + " - " + cur.getString(cur.getColumnIndex("ESTADO")));
				list.add(datum);
			}
			return list;
		} else {
			return null;
		}
		
	}
	public List<Order> buscarPedidosXCliente(int codigoCliente, int codigoVendedor){
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();
		
		String Sql = "SELECT NUMERO,NUMEROFINAL,FECHA,CANTIDADITEMS," +
				"(CASE WHEN ESTADO=0 THEN 'FINALIZADO' " +
				"WHEN ESTADO=10 THEN 'EDITADO' " +
				"WHEN ESTADO=11 THEN 'MARCADO' " + 
				"WHEN ESTADO=12 THEN 'ERROR' " +
				"WHEN ESTADO=1 THEN 'ENVIADO' " +
				"WHEN ESTADO=2 THEN 'ANULADO' END) AS ESTADO FROM PEDIDOSCABECERA WHERE CODIGOCLIENTE=" + codigoCliente + " AND CODIGOVENDEDOR="+ codigoVendedor + " AND ESTADO<90 ORDER BY NUMERO DESC";
		Cursor cur = db.rawQuery(Sql, null);
		if (cur.getCount()>0){
			List<Order> list = new ArrayList <Order>();
			while (cur.moveToNext()){
				Order order=new Order();
				String estado=cur.getString(cur.getColumnIndex("ESTADO"));
				order.setNumber(funcion.format(cur.getInt(cur.getColumnIndex("NUMERO")),10)  + " - " + funcion.format(cur.getInt(cur.getColumnIndex("NUMEROFINAL")),10));
				order.setDate(funcion.dateToString_yyyymmdd_hhmm(cur.getLong(cur.getColumnIndex("FECHA")))+" - "+estado);				
				order.setItem(funcion.format(cur.getInt(cur.getColumnIndex("CANTIDADITEMS")),2));
				if(estado.equals("FINALIZADO") || estado.equals("EDITADO") || estado.equals("MARCADO") ){
					order.setIcon(R.drawable.amarillo);
				}else if(estado.equals("ANULADO")){
					order.setIcon(R.drawable.naranja);
				}else if(estado.equals("ENVIADO")){
					order.setIcon(R.drawable.verde);
				}else{
					order.setIcon(R.drawable.rojo);
				}
				list.add(order);		
			}
			return list;
		} else {
			return null;
		}
		
	}

	public List<Map<String, String>> buscarPedidosDelDia(int codigoVendedor) throws ParseException{
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();

		Date fecha = new Date();
		String hoyTexto = funcion.dateToString_yyyymmdd(fecha.getTime());
		Date fechaINI = funcion.stringToDate(hoyTexto);
		
		String Sql = "SELECT NUMERO,NUMEROFINAL,FECHA,CANTIDADITEMS," +
				"(CASE WHEN ESTADO=0 THEN 'S/ENVIAR|FINAL' " +
				"WHEN ESTADO=10 THEN 'S/FINALIZAR|EDITABLE' " +
				"WHEN ESTADO=11 THEN 'LISTO PARA ENVIAR' " + 
				"WHEN ESTADO=12 THEN 'ERROR!!! AL ENVIAR' " +
				"WHEN ESTADO=1 THEN 'ENVIADO' " +
				"WHEN ESTADO=2 THEN 'ANULADO' END) AS ESTADO FROM PEDIDOSCABECERA" +
				" WHERE FECHA BETWEEN " + fechaINI.getTime() + " AND " + fecha.getTime() + 
				" AND CODIGOVENDEDOR="+ codigoVendedor + " AND ESTADO<90 ORDER BY NUMERO DESC";
		Cursor cur = db.rawQuery(Sql, null);
		if (cur.getCount()>0){
			List<Map<String, String>> list = new ArrayList <Map<String, String>>();
			while (cur.moveToNext()){
				Map<String, String> datum = new HashMap<String, String>();
				datum.put("DATO07",funcion.format(cur.getInt(cur.getColumnIndex("NUMERO")),10) + " - " + funcion.format(cur.getInt(cur.getColumnIndex("NUMEROFINAL")),10));
				datum.put("DATO08",funcion.dateToString_yyyymmdd_hhmm(cur.getLong(cur.getColumnIndex("FECHA"))) + " - " + funcion.format(cur.getInt(cur.getColumnIndex("CANTIDADITEMS")),2) + " - " + cur.getString(cur.getColumnIndex("ESTADO")));
				list.add(datum);
			}
			return list;
		} else {
			return null;
		}
		
	}
	
	public List<Order> buscarPedidosXDia(int codigoVendedor){
		try{
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();

		Date fecha = new Date();
		String hoyTexto = funcion.dateToString_yyyymmdd(fecha.getTime());
		Date fechaINI = funcion.stringToDate(hoyTexto);
		
		String Sql = "SELECT NUMERO,NUMEROFINAL,FECHA,CANTIDADITEMS," +
				"(CASE WHEN ESTADO=0 THEN 'FINALIZADO' " +
				"WHEN ESTADO=10 THEN 'EDITADO' " +
				"WHEN ESTADO=11 THEN 'MARCADO'"+ 
				"WHEN ESTADO=12 THEN 'ERROR' " +
				"WHEN ESTADO=1 THEN 'ENVIADO' " +
				"WHEN ESTADO=2 THEN 'ANULADO' END) AS ESTADO FROM PEDIDOSCABECERA" +
				" WHERE FECHA BETWEEN " + fechaINI.getTime() + " AND " + fecha.getTime() + 
				" AND CODIGOVENDEDOR="+ codigoVendedor + " AND ESTADO<90 ORDER BY NUMERO DESC";
		Cursor cur = db.rawQuery(Sql, null);
		if (cur.getCount()>0){
			List<Order> list = new ArrayList <Order>();
			while (cur.moveToNext()){
				Order order=new Order();
				String estado=cur.getString(cur.getColumnIndex("ESTADO"));
				order.setNumber(funcion.format(cur.getInt(cur.getColumnIndex("NUMERO")),10)  + " - " + funcion.format(cur.getInt(cur.getColumnIndex("NUMEROFINAL")),10));
				order.setDate(funcion.dateToString_yyyymmdd_hhmm(cur.getLong(cur.getColumnIndex("FECHA")))+" - "+estado);				
				order.setItem(funcion.format(cur.getInt(cur.getColumnIndex("CANTIDADITEMS")),2));
				if(estado.equals("FINALIZADO") || estado.equals("EDITADO") || estado.equals("MARCADO")){
					order.setIcon(R.drawable.amarillo);
				}else if(estado.equals("ANULADO")){
					order.setIcon(R.drawable.naranja);
				}else if(estado.equals("ENVIADO")){
					order.setIcon(R.drawable.verde);
				}else{
					order.setIcon(R.drawable.rojo);
				}	
				list.add(order);
			}
			return list;
		} else {
			return null;
		}
		}catch(Exception ex){
			return null;
		}
	}
	
	public boolean buscarPedidoParaEdicion(long numeroPedido){
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();

		String Sql = "SELECT * FROM PELDIDOSCABECERA WHERE NUMERO=" + numeroPedido;
		Cursor cur = db.rawQuery(Sql, null);
		boolean Estado = false;
		if (cur.moveToNext()){
			switch (cur.getInt(cur.getColumnIndex("ESTADO"))) {
			case 0:
				Estado=true;
				break;
			case 1:
				Estado=false;
				break;
			case 2:
				Estado=false;
				break;
			case 11:
				Estado=false;
			case 10:
				Estado=true;
				break;
			default:
				Estado=false;
				break;
			}
		}
		return Estado;
	}

	public List<Map<String, String>> buscarPedidosPendientes(int codigoVendedor) {
		try{
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();

		Date fecha = new Date();
		String hoyTexto = funcion.dateToString_yyyymmdd(fecha.getTime());
		Date fechaINI = funcion.stringToDate(hoyTexto);
		
		String Sql = "SELECT NUMERO,NUMEROFINAL,FECHA,CANTIDADITEMS," +
				"(CASE WHEN ESTADO=0 THEN 'S/ENVIAR|FINAL' " +
				"WHEN ESTADO=10 THEN 'S/FINALIZAR|EDITABLE' " +
				"WHEN ESTADO=11 THEN 'LISTO PARA ENVIAR' " + 
				"WHEN ESTADO=12 THEN 'ERROR!!! AL ENVIAR' " +
				"WHEN ESTADO=1 THEN 'ENVIADO' " +
				"WHEN ESTADO=2 THEN 'ANULADO' END) AS ESTADO FROM PEDIDOSCABECERA" +
				" WHERE CODIGOVENDEDOR="+ codigoVendedor + " AND ESTADO NOT IN(1,2) ORDER BY NUMERO DESC";
		Cursor cur = db.rawQuery(Sql, null);
		if (cur.getCount()>0){
			List<Map<String, String>> list = new ArrayList <Map<String, String>>();
			while (cur.moveToNext()){
				Map<String, String> datum = new HashMap<String, String>();
				datum.put("DATO07",funcion.format(cur.getInt(cur.getColumnIndex("NUMERO")),10) + " - " + funcion.format(cur.getInt(cur.getColumnIndex("NUMEROFINAL")),10));
				datum.put("DATO08",funcion.dateToString_yyyymmdd_hhmm(cur.getLong(cur.getColumnIndex("FECHA"))) + " - " + funcion.format(cur.getInt(cur.getColumnIndex("CANTIDADITEMS")),2) + " - " + cur.getString(cur.getColumnIndex("ESTADO")));
				list.add(datum);
			}
			return list;
		} else {
			return null;
		}
		}catch(Exception ex){
			return null;
		}
	}
	
	public List<Order> buscarPedidosPendientesDia(int codigoVendedor) {
		try{
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();

		Date fecha = new Date();
		String hoyTexto = funcion.dateToString_yyyymmdd(fecha.getTime());
		Date fechaINI = funcion.stringToDate(hoyTexto);
		
		String Sql = "SELECT NUMERO,NUMEROFINAL,FECHA,CANTIDADITEMS," +
				"(CASE WHEN ESTADO=0 THEN 'FINALIZADO' " +
				"WHEN ESTADO=10 THEN 'EDITADO' " +
				"WHEN ESTADO=11 THEN 'MARCADO' " + 
				"WHEN ESTADO=12 THEN 'ERROR' " +
				"WHEN ESTADO=1 THEN 'ENVIADO' " +
				"WHEN ESTADO=2 THEN 'ANULADO' END) AS ESTADO FROM PEDIDOSCABECERA" +
				" WHERE CODIGOVENDEDOR="+ codigoVendedor + " AND ESTADO NOT IN(1,2) ORDER BY NUMERO DESC";
		Cursor cur = db.rawQuery(Sql, null);
		if (cur.getCount()>0){
			List<Order> list = new ArrayList <Order>();
			while (cur.moveToNext()){
				Order order=new Order();
				String estado=cur.getString(cur.getColumnIndex("ESTADO"));
				order.setNumber(funcion.format(cur.getInt(cur.getColumnIndex("NUMERO")),10)  + " - " + funcion.format(cur.getInt(cur.getColumnIndex("NUMEROFINAL")),10));
				order.setDate(funcion.dateToString_yyyymmdd_hhmm(cur.getLong(cur.getColumnIndex("FECHA")))+" - "+estado);				
				order.setItem(funcion.format(cur.getInt(cur.getColumnIndex("CANTIDADITEMS")),2));
				if(estado.equals("FINALIZADO") || estado.equals("EDITADO") || estado.equals("MARCADO")){
					order.setIcon(R.drawable.amarillo);
				}else if(estado.equals("ANULADO")){
					order.setIcon(R.drawable.naranja);
				}else if(estado.equals("ENVIADO")){
					order.setIcon(R.drawable.verde);
				}else{
					order.setIcon(R.drawable.rojo);
				}	
				list.add(order);
			}
			return list;
		} else {
			return null;
		}
		}catch(Exception ex){
			return null;
		}
	}
	
	public boolean buscarSiYaFueCargadoElArtículo(long numeroPedido, String codigoArticulo) throws Exception{
		try {
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql = "SELECT CODIGOARTICULO FROM PEDIDOSCUERPO "
					+ "WHERE NUMERO=" + numeroPedido + " AND CODIGOARTICULO='" + codigoArticulo + "' AND ESTADO<90";
			Cursor cur = db.rawQuery(Sql, null);
			if (cur.getCount()>0){
				return true;
			} else {
				return false;
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception("Error al buscar si está ingresado el articulo seleccionado: " + e.getMessage());
		}
	}
	
	public int devolverCantidadVendidosXCliente(int dia, int codigoCliente) throws Exception{
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();
		Cursor cur = null;
		int cantidad=0;
		try {
			Date fecha = new Date();
			String hoyTexto = funcion.dateToString_yyyymmdd(fecha.getTime());
			Date fechaINI = funcion.stringToDate(hoyTexto);

			String Sql = "SELECT COUNT(A.CODIGOCLIENTE),NUMERO FROM PEDIDOSCABECERA AS A "
					+ "WHERE A.CODIGOCLIENTE=" + codigoCliente +
					" AND A.FECHA BETWEEN " + fechaINI.getTime() + " AND " + fecha.getTime() + 
					" AND A.ESTADO NOT IN(2) "
					+ "GROUP BY A.CODIGOCLIENTE";
			cur = db.rawQuery(Sql, null);
			if (cur.getCount()>0) {
				while (cur.moveToNext()){
					cantidad++;
				}
			} else {
				cantidad=0;
			}
			return cantidad;			
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception(e.getMessage());
		}
	}
	
}
