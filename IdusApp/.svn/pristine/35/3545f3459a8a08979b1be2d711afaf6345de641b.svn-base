package com.gvs.idusapp;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;
import com.gvs.conectoras.ConectorCliente;
import com.gvs.conectoras.ConectorGeneral;
import com.gvs.controladores.ControladorUsuario;
import com.gvs.entidades.Configuracion;
import com.gvs.utilidades.BaseDeDatos;
import com.gvs.utilidades.Funciones;
import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.database.sqlite.SQLiteDatabase;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

public class GpsClientActivity extends Activity {
	private TextView lbl_gps;
	private Button btn_guardar;
	private Funciones funcion;
	private ControladorUsuario controladorUsuario;
	private Configuracion configuracion;
	private LocationManager locManager;
	private LocationListener locLis;
	private Location location;
	private String latitud = "";
	private String longitud = "";
	private int codigoCliente;
	private int empresa;
	private ConectorGeneral conectorCliente;
	private GoogleMap mMap;
	private ProgressDialog syncPrgDialog = null;
	private Bundle bun;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_gps_client);
		lbl_gps=(TextView)findViewById(R.id.txt_gps);
		btn_guardar = (Button) findViewById(R.id.btn_guardar);
		funcion = new Funciones();
	    bun = getIntent().getExtras();
		controladorUsuario = new ControladorUsuario();
		empresa = bun.getInt("EMPRESA");
		codigoCliente = bun.getInt("CODIGOCLIENTE");
		String[] cliente=bun.getString("DATO01").split("-");
		lbl_gps.setText(cliente[1]);
		comenzarLocalizacion();		
		btn_guardar.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				try {
					if (latitud.equals("") || !longitud.equals("")) {
						BaseDeDatos baseDeDatos = new BaseDeDatos(GpsClientActivity.this, funcion.BaseDeDatos(),null, funcion.Version());
						SQLiteDatabase db = baseDeDatos.getReadableDatabase();
						String sql = "UPDATE CLIENTES SET LATITUD="+ Double.parseDouble(latitud.toString())+ ",LONGITUD="+ Double.parseDouble(longitud.toString())+ ",EDITADO=1 WHERE CODIGO=" + codigoCliente;
						db.execSQL(sql);
						configuracion = funcion.devolverConfiguracion(GpsClientActivity.this);
						conectorCliente = new ConectorCliente(configuracion,GpsClientActivity.this, empresa, codigoCliente,Double.parseDouble(latitud.toString()), Double.parseDouble(longitud.toString()));
						syncPrgDialog = ProgressDialog.show(GpsClientActivity.this,"Gps","Enviando coordenadas...");
						new Thread() {
							public void run() {
								try {
									conectorCliente.correr(GpsClientActivity.this);
								} catch (Exception e) {
									syncPrgDialog.dismiss();
									Toast toast = Toast.makeText(getApplicationContext(),"Error al enviar datos",Toast.LENGTH_SHORT);
									toast.show();								
								}
							}
						}.start();
						syncPrgDialog.dismiss();
						Toast toast = Toast.makeText(getApplicationContext(),"Cliente localizado", Toast.LENGTH_SHORT);
						toast.show();
						
					} else {
						syncPrgDialog.dismiss();
						Toast toast = Toast.makeText(getApplicationContext(),"Activar el GPS", Toast.LENGTH_SHORT);
						toast.show();
					}
				} catch (Exception ex) {
					syncPrgDialog.dismiss();
					Toast toast = Toast.makeText(getApplicationContext(),"Error al enviar datos", Toast.LENGTH_SHORT);
					toast.show();
				}
			}
		});

	}

	private void comenzarLocalizacion() {
		try {
			locManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
			if (locManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
				locManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);

			} else {
				if (locManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {
					locManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		locLis = new LocationListener() {

			@Override
			public void onStatusChanged(String provider, int status,
					Bundle extras) {
			}

			@Override
			public void onProviderEnabled(String provider) {

			}

			@Override
			public void onProviderDisabled(String provider) {

			}

			@Override
			public void onLocationChanged(Location location) {
				latitud = String.valueOf(location.getLatitude());
				longitud = String.valueOf(location.getLongitude());
			}

		};

		if (locManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
			locManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,10000, 10, locLis);
			location = locManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
			btn_guardar.setEnabled(true);
			if (location != null) {			
				latitud = String.valueOf(location.getLatitude());
				longitud = String.valueOf(location.getLongitude());
				LatLng newLatLng = new LatLng(location.getLatitude(), location.getLongitude());
				mMap = ((MapFragment)getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.addMarker(new MarkerOptions().position(newLatLng).title("Estoy Aqui"));	
			    mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(location.getLatitude(), location.getLongitude()), 15.0f));
			}
		} else {
			btn_guardar.setEnabled(false);
			if (locManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {
				locManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 10000, 10, locLis);
				location = locManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
				if (location != null) {
				LatLng newLatLng = new LatLng(location.getLatitude(), location.getLongitude());
				mMap = ((MapFragment)getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.addMarker(new MarkerOptions().position(newLatLng).title("Estoy Aqui"));	
			    mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(location.getLatitude(), location.getLongitude()), 15.0f));
				}
			}
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.gps_client, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		int id = item.getItemId();
		if (id == R.id.cerrar_sesion) {
			startActivity(new Intent(getBaseContext(), MainActivity.class)
            .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP));
			controladorUsuario.cerrarSesion(this);
			finish();
		}else if(id == R.id.sincronizar){
			Intent i = new Intent(this, SyncActivity.class);
			bun.putString("SINCRONIZACION","GENERAL");
			i.putExtras(bun);
			startActivity(i);
		}
		return super.onOptionsItemSelected(item);
	}

}
