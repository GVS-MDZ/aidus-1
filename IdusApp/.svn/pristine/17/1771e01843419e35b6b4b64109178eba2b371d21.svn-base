package com.gvs.idusapp;

import java.util.List;

import com.gvs.busquedas.BusquedaConfiguracion;
import com.gvs.busquedas.BusquedaPedidos;
import com.gvs.busquedas.BusquedaSincronizacion;
import com.gvs.busquedas.BusquedaUsuario;
import com.gvs.conectoras.ConectorActualizacionStock;
import com.gvs.conectoras.ConectorGeneral;
import com.gvs.conectoras.ConectorPedido;
import com.gvs.entidades.Configuracion;
import com.gvs.entidades.Order;
import com.gvs.utilidades.Funciones;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

public class OrderClientActivity extends Activity {
	private ListView list;
	private TextView lbl_cliente;
	private Button btn_enviar;
	private Bundle bun;
	private int empresa,vendedor,dia;
	private ProgressDialog syncPrgDialog = null;
	private Funciones funcion;
	private Handler handler;
	private List<Order> lista;
	private BusquedaUsuario controladorUsuario;
	private BusquedaPedidos busPedido;
	private BusquedaConfiguracion busquedaConfiguracion;
	private BusquedaSincronizacion busquedaSincronizacion;
	private Configuracion configuracion;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_order_client);
		try{
			list = (ListView) findViewById(R.id.lista_historico_cliente);
			btn_enviar = (Button)findViewById(R.id.btn_enviar2);
			lbl_cliente = (TextView) findViewById(R.id.lbl_cliente);
			
			funcion = new Funciones(this);
			busPedido = new BusquedaPedidos(this);
			bun = getIntent().getExtras();
			controladorUsuario = new BusquedaUsuario();
			busquedaSincronizacion=new BusquedaSincronizacion(this);
			lbl_cliente.setText(bun.getString("NOMBRECLIENTE"));
			empresa = bun.getInt("EMPRESA");
			vendedor = bun.getInt("VENDEDOR");
			dia=bun.getInt("DIA");
			handler = new Handler();
			busquedaConfiguracion=new BusquedaConfiguracion(this);
			
			btn_enviar.setOnClickListener(new OnClickListener() {
				
				public void onClick(View v) {
					    configuracion =  busquedaConfiguracion.buscarConfiguracion();
						syncPrgDialog = ProgressDialog.show(OrderClientActivity.this,"Sincronizando","Enviando pedidos...");
						if (funcion.conexionInternet()) {
							Thread thread = new Thread() {
								public void run() {
									try {
										BusquedaPedidos trbPedidos = new BusquedaPedidos(OrderClientActivity.this);
										trbPedidos.marcarParaEnviarPedidos(dia);
										List<Order> pedidos = trbPedidos.buscarPedidosParaEnviar(dia);
										ConectorGeneral conectorGeneral;
										for (Order pedido : pedidos) {
											try{
												conectorGeneral = new ConectorPedido(configuracion,OrderClientActivity.this, pedido,empresa, vendedor);
												conectorGeneral.correr(OrderClientActivity.this);
											    trbPedidos.pedidoEnviadoCorrectamente(Integer.parseInt(pedido.getNumber()));
											}catch(Exception ex){
												trbPedidos.pedidoConErrorAlEnvio(Integer.parseInt(pedido.getNumber()));
												continue;
											}
										}
										busquedaSincronizacion.guardarSincronizacionParcial(empresa, vendedor);
										conectorGeneral = new ConectorActualizacionStock(configuracion, empresa, 1,OrderClientActivity.this);
										conectorGeneral.correr(OrderClientActivity.this);
										actualizarActividad();
									} catch (Exception e) {
										actualizarActividad();
									}
								}
							};
							thread.start();
						} else {
							Toast toast =Toast.makeText(getApplicationContext(),"Red no conectada, verifique internet", Toast.LENGTH_SHORT);
							toast.show();
						}
					}
				});
			
			buscarPedidos();
			mostrarLista();
			realizarOperacion();
		}catch(Exception ex){
			Toast toast =Toast.makeText(getApplicationContext(),"Bug al listar pedidos", Toast.LENGTH_SHORT);
			toast.show();
		}
	}
	
	public void actualizarActividad(){
		handler.post(new Runnable() {
			@Override
			public void run() {
				buscarPedidos();
				mostrarLista();	
				syncPrgDialog.dismiss();
			}
		});
	}

	@Override
 	protected void onRestart() {
		buscarPedidos();
		mostrarLista();
		realizarOperacion();
		super.onRestart();
	}
	
	public void buscarPedidos(){
		try{
			lista=busPedido.buscarPedidosXCliente(dia,bun.getInt("CODIGOCLIENTE"), bun.getInt("VENDEDOR"));
		}catch(Exception ex){
			Toast toast =Toast.makeText(getApplicationContext(),"Bug al listar pedidos", Toast.LENGTH_SHORT);
			toast.show();
		}
	}
	
	private void mostrarLista() {
		if(lista!=null){
			ArrayAdapter<Order> adapter = new MyListAdapter();
			list.setAdapter(adapter);
		}
	}
	
	private void realizarOperacion() {
		list.setOnItemClickListener(new AdapterView.OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> parent, View view,int position, long id) {
				try{
					Order order = lista.get(position);
					bun.putLong("NUMERO",Long.parseLong(order.getNumber()));
					Intent intent = new Intent(OrderClientActivity.this,OrderDetailFinalActivity.class);
					intent.putExtras(bun);
					startActivity(intent);
				}catch(Exception ex){
					Toast toast =Toast.makeText(getApplicationContext(),"Bug en el pedido seleccionado", Toast.LENGTH_SHORT);
					toast.show();
				}
			}
		});
	}
	
	private class MyListAdapter extends ArrayAdapter<Order> {

		public MyListAdapter() {
			super(OrderClientActivity.this, R.layout.activity_order_client, lista);
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			View view = convertView;
			ViewHolder holder;
			if (view == null) {
				view = getLayoutInflater().inflate(R.layout.row_order, parent,false);
				holder = new ViewHolder();
				holder.image_operation=(ImageView) view.findViewById(R.id.img_estado_cliente);
				holder.lbl_name=(TextView) view.findViewById(R.id.lbl_numero_pedido);
				holder.lbl_address=(TextView) view.findViewById(R.id.lbl_fecha_pedido);
				holder.lbl_total=(TextView) view.findViewById(R.id.lbl_total);
				view.setTag(holder);
			}else{
				holder = (ViewHolder) view.getTag();
			}
			Order order = lista.get(position);
			holder.image_operation.setImageResource(order.getIcon());
			holder.lbl_name.setText(order.getNumber()+" - "+order.getNumber_final());
			holder.lbl_address.setText(order.getNombre_cliente());
			holder.lbl_total.setText(order.getDate()+" - Total: "+funcion.formatDecimal(order.getTotal(),2)+" - Items:"+order.getItem());
			return view;
		}
	}
	
	static class ViewHolder {
		ImageView image_operation;
		TextView lbl_name;
		TextView lbl_address;
		TextView lbl_total;
	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.order_client, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		int id = item.getItemId();
		if (id == R.id.cerrar_sesion) {
			startActivity(new Intent(getBaseContext(), MainActivity.class)
            .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP));
			controladorUsuario.cerrarSesion(this);
			finish();
		}else if(id == R.id.sincronizar){
			Intent i = new Intent(this, SyncActivity.class);
			bun.putString("SINCRONIZACION","GENERAL");
			i.putExtras(bun);
			startActivity(i);
		}
		return super.onOptionsItemSelected(item);
	}
	
	

}
