package com.gvs.busquedas;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import com.gvs.entidades.Articulos;
import com.gvs.entidades.Order;
import com.gvs.entidades.OrderDetail;
import com.gvs.idusapp.R;
import com.gvs.utilidades.BaseDeDatos;
import com.gvs.utilidades.Funciones;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;

public class BusquedaPedidos {
	
	private Context conte;
	private Funciones funcion = new Funciones();
	
	public BusquedaPedidos(Context cont) {
		conte=cont;		
	}
	
	public List<Order> buscarPedidosXCliente(int dia,int codigoCliente, int codigoVendedor)throws Exception{
		try{
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			Date fecha = new Date();
			Calendar calendario=Calendar.getInstance();
			calendario.setTime(fecha);
			calendario.add(Calendar.DAY_OF_YEAR,-30);
			Date fecha_mes=calendario.getTime();
			String hoyTexto = funcion.dateToString_yyyymmdd(fecha_mes.getTime());
			Date fechaINI = funcion.stringToDate(hoyTexto);
			String Sql = "SELECT A.CODIGOCLIENTE, NUMERO,NUMEROFINAL,FECHA,CANTIDADITEMS," +
					"(CASE WHEN ESTADO=0 THEN 'FINALIZADO' " +
					"WHEN ESTADO=10 THEN 'EDITADO' " +
					"WHEN ESTADO=11 THEN 'MARCADO' " + 
					"WHEN ESTADO=12 THEN 'ERROR' " +
					"WHEN ESTADO=13 THEN 'EMAIL' " +
					"WHEN ESTADO=1 THEN 'ENVIADO' " +
					"WHEN ESTADO=2 THEN 'ANULADO' END) AS ESTADO, C.NOMBRE "
					+ "FROM PEDIDOSCABECERA AS A INNER JOIN CLIENTES AS C ON A.CODIGOCLIENTE=C.CODIGO WHERE FECHA BETWEEN " + fechaINI.getTime() + " AND " + fecha.getTime() + " "
					+ "AND CODIGOCLIENTE=" + codigoCliente + " AND A.CODIGOVENDEDOR="+ codigoVendedor + " AND ESTADO<90 ORDER BY C.CODIGO ";
			Cursor cur = db.rawQuery(Sql, null);
	
			List<Order> list = new ArrayList <Order>();
			Order order;
			while (cur.moveToNext()){
					order=new Order();
					String estado=cur.getString(cur.getColumnIndex("ESTADO"));
					order.setNumber(funcion.format(cur.getInt(cur.getColumnIndex("NUMERO")),10));
					order.setNumber_final(funcion.format(cur.getInt(cur.getColumnIndex("NUMEROFINAL")),10));
					order.setDate(funcion.dateToString_yyyymmdd_hhmm(cur.getLong(cur.getColumnIndex("FECHA")))+" - "+estado);				
					order.setItem(funcion.format(cur.getInt(cur.getColumnIndex("CANTIDADITEMS")),2));
					order.setNombre_cliente(cur.getInt(cur.getColumnIndex("CODIGOCLIENTE"))+"-"+cur.getString(cur.getColumnIndex("NOMBRE")));
					if(estado.equals("FINALIZADO") || estado.equals("EDITADO") || estado.equals("MARCADO") ){
						order.setIcon(R.drawable.amarillo);
					}else if(estado.equals("ANULADO")){
						order.setIcon(R.drawable.naranja);
					}else if(estado.equals("ENVIADO")){
						order.setIcon(R.drawable.verde);
					}else if(estado.equals("EMAIL")){
						order.setIcon(R.drawable.azul);
					}else{
						order.setIcon(R.drawable.rojo);
					}
					List<OrderDetail> detalle=listarItemsDelPedidos(cur.getInt(cur.getColumnIndex("NUMERO")));
					double suma_articulos=0;
					if(detalle!=null){
						for(OrderDetail item:detalle){
							double pr=Double.parseDouble(item.getPrecio());
							double ca=Double.parseDouble(item.getCantidad());
							double importe_total_articulo=pr*ca;
							double descuento=(pr*Double.parseDouble(item.getDescuento()))/100;
							double total_articulo=importe_total_articulo-descuento;
							suma_articulos=suma_articulos+total_articulo;
						}
					}
					order.setTotal(Double.valueOf(suma_articulos));
					list.add(order);		
			}
			return list;	
		}catch(Exception ex){
			throw new Exception(ex.getMessage());
		}
	}
	
	public List<Order> buscarPedidosXDia(int codigoVendedor,int dia)throws Exception{
		try{
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();

		Date fecha = new Date();
		String hoyTexto = funcion.dateToString_yyyymmdd(fecha.getTime());
		Date fechaINI = funcion.stringToDate(hoyTexto);
		String Sql="";
		if(dia>0){
			Sql = "SELECT A.CODIGOCLIENTE,NUMERO,NUMEROFINAL,FECHA,CANTIDADITEMS," +
					"(CASE WHEN ESTADO=0 THEN 'FINALIZADO' " +
					"WHEN ESTADO=10 THEN 'EDITADO' " +
					"WHEN ESTADO=11 THEN 'MARCADO'"+ 
					"WHEN ESTADO=12 THEN 'ERROR' " +
					"WHEN ESTADO=13 THEN 'EMAIL' " +
					"WHEN ESTADO=1 THEN 'ENVIADO' " +
					"WHEN ESTADO=2 THEN 'ANULADO' END) AS ESTADO , C.NOMBRE"+
					" FROM PEDIDOSCABECERA AS A INNER JOIN VISITAS AS V ON A.CODIGOCLIENTE=V.CODIGOCLIENTE INNER JOIN CLIENTES AS C ON V.CODIGOCLIENTE=C.CODIGO" +
					" WHERE A.FECHA BETWEEN " + fechaINI.getTime() + " AND " + fecha.getTime() + 
					" AND A.CODIGOVENDEDOR="+ codigoVendedor + " AND ESTADO<90 AND A.DIA= "+dia+" AND SUBSTR(V.DIAS," + dia +",1)='" + dia +"' ORDER BY C.CODIGO ";
		}else{
			Sql = "SELECT A.CODIGOCLIENTE,NUMERO,NUMEROFINAL,FECHA,CANTIDADITEMS," +
					"(CASE WHEN ESTADO=0 THEN 'FINALIZADO' " +
					"WHEN ESTADO=10 THEN 'EDITADO' " +
					"WHEN ESTADO=11 THEN 'MARCADO'"+ 
					"WHEN ESTADO=12 THEN 'ERROR' " +
					"WHEN ESTADO=13 THEN 'EMAIL' " +
					"WHEN ESTADO=1 THEN 'ENVIADO' " +
					"WHEN ESTADO=2 THEN 'ANULADO' END) AS ESTADO , C.NOMBRE"+
					" FROM PEDIDOSCABECERA AS A INNER JOIN VISITAS AS V ON A.CODIGOCLIENTE=V.CODIGOCLIENTE INNER JOIN CLIENTES AS C ON V.CODIGOCLIENTE=C.CODIGO" +
					" WHERE A.FECHA BETWEEN " + fechaINI.getTime() + " AND " + fecha.getTime() + 
					" AND A.CODIGOVENDEDOR="+ codigoVendedor + " AND ESTADO<90  AND V.DIAS IN('0000000','8888888','9999999') ORDER BY C.CODIGO ";	
		}

		Cursor cur = db.rawQuery(Sql, null);
		List<Order> list=null;
		if (cur.getCount()>0){
			list = new ArrayList <Order>();
			while (cur.moveToNext()){
				Order order=new Order();
				String estado=cur.getString(cur.getColumnIndex("ESTADO"));
				order.setNumber(funcion.format(cur.getInt(cur.getColumnIndex("NUMERO")),10));
				order.setNumber_final(funcion.format(cur.getInt(cur.getColumnIndex("NUMEROFINAL")),10));
				order.setDate(funcion.dateToString_yyyymmdd_hhmm(cur.getLong(cur.getColumnIndex("FECHA")))+" - "+estado);				
				order.setItem(funcion.format(cur.getInt(cur.getColumnIndex("CANTIDADITEMS")),2));
				order.setNombre_cliente(cur.getInt(cur.getColumnIndex("CODIGOCLIENTE"))+"-"+cur.getString(cur.getColumnIndex("NOMBRE")));
				if(estado.equals("FINALIZADO") || estado.equals("EDITADO") || estado.equals("MARCADO")){
					order.setIcon(R.drawable.amarillo);
				}else if(estado.equals("ANULADO")){
					order.setIcon(R.drawable.naranja);
				}else if(estado.equals("ENVIADO")){
					order.setIcon(R.drawable.verde);
				}else if(estado.equals("EMAIL")){
					order.setIcon(R.drawable.azul);
				}
				else{
					order.setIcon(R.drawable.rojo);
				}
				List<OrderDetail> detalle=listarItemsDelPedidos(cur.getInt(cur.getColumnIndex("NUMERO")));
				double suma_articulos=0;
				if(detalle!=null){
					for(OrderDetail item:detalle){
						double pr=Double.parseDouble(item.getPrecio());
						double ca=Double.parseDouble(item.getCantidad());
						double importe_total_articulo=pr*ca;
						double descuento=(pr*Double.parseDouble(item.getDescuento()))/100;
						double total_articulo=importe_total_articulo-descuento;
						suma_articulos=suma_articulos+total_articulo;
					}
				}
				order.setTotal(Double.valueOf(suma_articulos));
				list.add(order);
			}
		}
		return list;
		}catch(Exception ex){
			throw new Exception(ex.getMessage());
		}
	}
	
	public List<Order> buscarPedidosXDiaMail(int codigoVendedor,int dia)throws Exception{
		try{
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();
		Date fecha = new Date();
		String hoyTexto = funcion.dateToString_yyyymmdd(fecha.getTime());
		Date fechaINI = funcion.stringToDate(hoyTexto);
		String Sql="";
		if(dia>0){
			Sql = "SELECT A.CODIGOCLIENTE,NUMERO,NUMEROFINAL,FECHA,CANTIDADITEMS," +
					"(CASE WHEN ESTADO=0 THEN 'FINALIZADO' " +
					"WHEN ESTADO=10 THEN 'EDITADO' " +
					"WHEN ESTADO=11 THEN 'MARCADO'"+ 
					"WHEN ESTADO=12 THEN 'ERROR' " +
					"WHEN ESTADO=13 THEN 'EMAIL' " +
					"WHEN ESTADO=1 THEN 'ENVIADO' " +
					"WHEN ESTADO=2 THEN 'ANULADO' END) AS ESTADO , C.NOMBRE"
					+ " FROM PEDIDOSCABECERA AS A INNER JOIN VISITAS AS V ON A.CODIGOCLIENTE=V.CODIGOCLIENTE  INNER JOIN CLIENTES AS C ON V.CODIGOCLIENTE=C.CODIGO" +
					" WHERE A.FECHA BETWEEN " + fechaINI.getTime() + " AND " + fecha.getTime() + 
					" AND A.CODIGOVENDEDOR="+ codigoVendedor + " AND ESTADO IN(0,10,11,12,13) AND A.DIA= "+dia+" AND SUBSTR(V.DIAS," + dia +",1)='" + dia +"' ORDER BY C.CODIGO ";
		}else{
			Sql = "SELECT A.CODIGOCLIENTE,NUMERO,NUMEROFINAL,FECHA,CANTIDADITEMS," +
					"(CASE WHEN ESTADO=0 THEN 'FINALIZADO' " +
					"WHEN ESTADO=10 THEN 'EDITADO' " +
					"WHEN ESTADO=11 THEN 'MARCADO'"+ 
					"WHEN ESTADO=12 THEN 'ERROR' " +
					"WHEN ESTADO=13 THEN 'EMAIL' " +
					"WHEN ESTADO=1 THEN 'ENVIADO' " +
					"WHEN ESTADO=2 THEN 'ANULADO' END) AS ESTADO , C.NOMBRE"
					+ " FROM PEDIDOSCABECERA AS A INNER JOIN VISITAS AS V ON A.CODIGOCLIENTE=V.CODIGOCLIENTE INNER JOIN CLIENTES AS C ON V.CODIGOCLIENTE=C.CODIGO" +
					" WHERE A.FECHA BETWEEN " + fechaINI.getTime() + " AND " + fecha.getTime() + 
					" AND A.CODIGOVENDEDOR="+ codigoVendedor + " AND ESTADO IN(0,10,11,12,13) AND A.DIA='0000000' ORDER BY C.CODIGO ";		
		}

		Cursor cur = db.rawQuery(Sql, null);
		List<Order> list=null;
		if (cur.getCount()>0){
			list = new ArrayList <Order>();
			while (cur.moveToNext()){
				Order order=new Order();
				String estado=cur.getString(cur.getColumnIndex("ESTADO"));
				order.setNumber(funcion.format(cur.getInt(cur.getColumnIndex("NUMERO")),10));
				order.setNumber_final(funcion.format(cur.getInt(cur.getColumnIndex("NUMEROFINAL")),10));
				order.setDate(funcion.dateToString_yyyymmdd_hhmm(cur.getLong(cur.getColumnIndex("FECHA")))+" - "+estado);				
				order.setItem(funcion.format(cur.getInt(cur.getColumnIndex("CANTIDADITEMS")),2));
				order.setNombre_cliente(cur.getInt(cur.getColumnIndex("CODIGOCLIENTE"))+"-"+cur.getString(cur.getColumnIndex("NOMBRE")));
				if(estado.equals("FINALIZADO") || estado.equals("EDITADO") || estado.equals("MARCADO")){
					order.setIcon(R.drawable.amarillo);
				}else if(estado.equals("ANULADO")){
					order.setIcon(R.drawable.naranja);
				}else if(estado.equals("ENVIADO")){
					order.setIcon(R.drawable.verde);
				}else if(estado.equals("EMAIL")){
					order.setIcon(R.drawable.azul);
				}
				else{
					order.setIcon(R.drawable.rojo);
				}	
				List<OrderDetail> detalle=listarItemsDelPedidos(cur.getInt(cur.getColumnIndex("NUMERO")));
				double suma_articulos=0;
				if(detalle!=null){
					for(OrderDetail item:detalle){
						double pr=Double.parseDouble(item.getPrecio());
						double ca=Double.parseDouble(item.getCantidad());
						double importe_total_articulo=pr*ca;
						double descuento=(pr*Double.parseDouble(item.getDescuento()))/100;
						double total_articulo=importe_total_articulo-descuento;
						suma_articulos=suma_articulos+total_articulo;
					}
				}
				order.setTotal(Double.valueOf(suma_articulos));
				list.add(order);
			}	
		} 
		return list;
		}catch(Exception ex){
			throw new Exception(ex.getMessage());
		}
	}
		
	public List<Order> buscarPedidosPendientesDia(int codigoVendedor,int dia)throws Exception {
		try{
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();
		Date fecha = new Date();
		String hoyTexto = funcion.dateToString_yyyymmdd(fecha.getTime());
		Date fechaINI = funcion.stringToDate(hoyTexto);
		String Sql="";
		if(dia>0){
		   Sql = "SELECT A.CODIGOCLIENTE,NUMERO,NUMEROFINAL,FECHA,CANTIDADITEMS," +
					"(CASE WHEN ESTADO=0 THEN 'FINALIZADO' " +
					"WHEN ESTADO=10 THEN 'EDITADO' " +
					"WHEN ESTADO=11 THEN 'MARCADO'"+ 
					"WHEN ESTADO=12 THEN 'ERROR' " +
					"WHEN ESTADO=1 THEN 'ENVIADO' " +
					"WHEN ESTADO=2 THEN 'ANULADO' END) AS ESTADO , C.NOMBRE FROM PEDIDOSCABECERA AS A INNER JOIN VISITAS AS V ON A.CODIGOCLIENTE=V.CODIGOCLIENTE INNER JOIN CLIENTES AS C ON V.CODIGOCLIENTE=C.CODIGO" +
					" WHERE A.FECHA BETWEEN " + fechaINI.getTime() + " AND " + fecha.getTime() + 
					" AND A.DIA= "+dia+" AND A.CODIGOVENDEDOR="+ codigoVendedor + " AND ESTADO NOT IN(1,2,13) AND SUBSTR(V.DIAS," + dia +",1)='" + dia +"' ORDER BY C.CODIGO ";
		}else{
			 Sql = "SELECT A.CODIGOCLIENTE,NUMERO,NUMEROFINAL,FECHA,CANTIDADITEMS," +
						"(CASE WHEN ESTADO=0 THEN 'FINALIZADO' " +
						"WHEN ESTADO=10 THEN 'EDITADO' " +
						"WHEN ESTADO=11 THEN 'MARCADO'"+ 
						"WHEN ESTADO=12 THEN 'ERROR' " +
						"WHEN ESTADO=1 THEN 'ENVIADO' " +
						"WHEN ESTADO=2 THEN 'ANULADO' END) AS ESTADO , C.NOMBRE FROM PEDIDOSCABECERA AS A INNER JOIN VISITAS AS V ON A.CODIGOCLIENTE=V.CODIGOCLIENTE INNER JOIN CLIENTES AS C ON V.CODIGOCLIENTE=C.CODIGO" +
						" WHERE A.FECHA BETWEEN " + fechaINI.getTime() + " AND " + fecha.getTime() + 
						" AND A.DIA= "+dia+" AND A.CODIGOVENDEDOR="+ codigoVendedor + " AND ESTADO NOT IN(1,2,13) AND V.DIAS IN('0000000','8888888','9999999') ORDER BY C.CODIGO ";
		}
		
		Cursor cur = db.rawQuery(Sql, null);
		List<Order> list=null;
		if (cur.getCount()>0){
			 list = new ArrayList <Order>();
			while (cur.moveToNext()){
				Order order=new Order();
				String estado=cur.getString(cur.getColumnIndex("ESTADO"));
				order.setNumber(funcion.format(cur.getInt(cur.getColumnIndex("NUMERO")),10));
				order.setNumber_final(funcion.format(cur.getInt(cur.getColumnIndex("NUMEROFINAL")),10));
				order.setDate(funcion.dateToString_yyyymmdd_hhmm(cur.getLong(cur.getColumnIndex("FECHA")))+" - "+estado);				
				order.setItem(funcion.format(cur.getInt(cur.getColumnIndex("CANTIDADITEMS")),2));
				order.setNombre_cliente(cur.getInt(cur.getColumnIndex("CODIGOCLIENTE"))+"-"+cur.getString(cur.getColumnIndex("NOMBRE")));
				if(estado.equals("FINALIZADO") || estado.equals("EDITADO") || estado.equals("MARCADO")){
					order.setIcon(R.drawable.amarillo);
				}else if(estado.equals("ANULADO")){
					order.setIcon(R.drawable.naranja);
				}else if(estado.equals("ENVIADO")){
					order.setIcon(R.drawable.verde);
				}else{
					order.setIcon(R.drawable.rojo);
				}	
				List<OrderDetail> detalle=listarItemsDelPedidos(cur.getInt(cur.getColumnIndex("NUMERO")));
				double suma_articulos=0;
				if(detalle!=null){
					for(OrderDetail item:detalle){
						double pr=Double.parseDouble(item.getPrecio());
						double ca=Double.parseDouble(item.getCantidad());
						double importe_total_articulo=pr*ca;
						double descuento=(pr*Double.parseDouble(item.getDescuento()))/100;
						double total_articulo=importe_total_articulo-descuento;
						suma_articulos=suma_articulos+total_articulo;
					}
				}
				order.setTotal(Double.valueOf(suma_articulos));
				list.add(order);
			}
		}
		return list;
		}catch(Exception ex){
			throw new Exception(ex.getMessage());
		}
	}
	
	public boolean buscarSiYaFueCargadoElArtículo(long numeroPedido, String codigoArticulo) throws Exception{
		try {
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql = "SELECT CODIGOARTICULO FROM PEDIDOSCUERPO "
					+ "WHERE NUMERO=" + numeroPedido + " AND CODIGOARTICULO='" + codigoArticulo + "' AND ESTADO<90";
			Cursor cur = db.rawQuery(Sql, null);
			if (cur.getCount()>0){
				return true;
			} else {
				return false;
			}
		} catch (Exception e) {
			throw new Exception("Error al buscar si está ingresado el articulo seleccionado: " + e.getMessage());
		}
	}
	
	public int devolverCantidadVendidosXCliente(int dia, int codigoCliente) throws Exception{
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();
		Cursor cur = null;
		int cantidad=0;
		try {
			Date fecha = new Date();
			String hoyTexto = funcion.dateToString_yyyymmdd(fecha.getTime());
			Date fechaINI = funcion.stringToDate(hoyTexto);
			String Sql="";
			if(dia>0){
			 Sql = "SELECT COUNT(A.CODIGOCLIENTE),NUMERO FROM PEDIDOSCABECERA AS A "
					+ "INNER JOIN VISITAS AS V ON A.CODIGOCLIENTE=V.CODIGOCLIENTE "
					+ "WHERE A.CODIGOCLIENTE=" + codigoCliente +" AND A.DIA= "+dia+
					" AND A.FECHA BETWEEN " + fechaINI.getTime() + " AND " + fecha.getTime() + 
					" AND A.ESTADO NOT IN(2) AND SUBSTR(V.DIAS," + dia +",1)='" + dia +"'"
					+" GROUP BY A.CODIGOCLIENTE";
			}else{
			 Sql = "SELECT COUNT(A.CODIGOCLIENTE),NUMERO FROM PEDIDOSCABECERA AS A "
						+ "INNER JOIN VISITAS AS V ON A.CODIGOCLIENTE=V.CODIGOCLIENTE "
						+ "WHERE A.CODIGOCLIENTE=" + codigoCliente +" AND A.DIA= "+dia+
						" AND A.FECHA BETWEEN " + fechaINI.getTime() + " AND " + fecha.getTime() + 
						" AND A.ESTADO NOT IN(2) AND V.DIAS IN('0000000','8888888','9999999') "
						+" GROUP BY A.CODIGOCLIENTE";
			}
			cur = db.rawQuery(Sql, null);
			if (cur.getCount()>0) {
				while (cur.moveToNext()){
					cantidad++;
				}
			} else {
				cantidad=0;
			}
			return cantidad;			
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception(e.getMessage());
		}
	}
		
	/**/
	
	public long numeroPedido(){
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();
		
		String sql = "SELECT MAX(NUMERO) FROM PEDIDOSCABECERA";
		Cursor cur = db.rawQuery(sql, null);
		if (cur.moveToNext()){
			if (cur.getString(0)!=null){
				return (cur.getLong(0) + 1);
			} else {
				return 1;
			}
		} else {
			return 1;
		}
		
	}

	public int numeroItesmPorPedido(long numeroPedido){
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();
		String sql = "SELECT * FROM PEDIDOSCUERPO WHERE NUMERO=" + numeroPedido + " AND ESTADO<90";
		Cursor cur = db.rawQuery(sql, null);
		int cantidad_items=0;
		if (cur.getCount()>0){
		while (cur.moveToNext()){
			int cantidadCombo=0;
			int cantidad_acumulada=0;
			String Sql2 = "SELECT * FROM COMBOS WHERE CODIGO=" + cur.getInt(cur.getColumnIndex("CODIGOARTICULO")) ;
			Cursor cur2 = db.rawQuery(Sql2, null);
			if (cur2.getCount()>0){
				while(cur2.moveToNext()){
					cantidadCombo= cur2.getInt(cur2.getColumnIndex("CANTIDAD"));
			     }
			} else{
				cantidad_acumulada=1;
			}
			int cantidad_suma=cantidad_acumulada+cantidadCombo;
			cantidad_items=cantidad_items+cantidad_suma;
			
		}
		}else{
			cantidad_items=0;
		}
		
		return cantidad_items;
	}
	
	public double totalPedido(long numeroPedido){
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();
		
		String sql = "SELECT SUM(CANTIDAD*PRECIO) FROM PEDIDOSCUERPO WHERE NUMERO=" + numeroPedido + " AND ESTADO<90";
		Cursor cur = db.rawQuery(sql, null);
		if (cur.moveToNext()){
			if (cur.getString(0)!=null){
				return cur.getDouble(0);
			} else {
				return 0;
			}
		} else {
			return 0;
		}
		
	}
	
	public int grabarPedido(ContentValues contCab, ContentValues contCue) throws Exception{
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();
		try {			
			String Sql = "";
			Cursor cur;					
		
			Sql = "SELECT * FROM PEDIDOSCABECERA WHERE NUMERO=" + contCab.getAsLong("NUMERO");
			cur = db.rawQuery(Sql, null);
			if (cur.moveToNext()) {
				db.update("PEDIDOSCABECERA", contCab, "NUMERO=" + contCab.getAsLong("NUMERO"), null);
			} else {
				db.insert("PEDIDOSCABECERA", null, contCab);
			}
			
			Sql = "SELECT * FROM PEDIDOSCUERPO WHERE NUMERO=" + contCue.getAsLong("NUMERO") + " AND NUMEROITEM=" + contCue.getAsInteger("NUMEROITEM");
			cur = db.rawQuery(Sql, null);
			if (cur.moveToNext()){
				db.update("PEDIDOSCUERPO", contCue, "NUMERO=" + contCue.getAsLong("NUMERO") + " AND NUMEROITEM=" + contCue.getAsInteger("NUMEROITEM"), null);
			} else {
				db.insert("PEDIDOSCUERPO", null, contCue);
			}

			return numeroItesmPorPedido(contCab.getAsInteger("NUMERO"));
						
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception(e.getMessage());
		} 
	}
		
	public boolean finalizarPedido(long numeroPedido){
		try {
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql=""; 
			Sql = "SELECT COUNT(ESTADO) FROM PEDIDOSCUERPO WHERE NUMERO=" + numeroPedido + " AND ESTADO<90";
			Cursor cur = db.rawQuery(Sql, null);
			if (cur.moveToNext()) {
				int cantidadItems = cur.getInt(0);
				if (cantidadItems>0) {
					Sql = "UPDATE PEDIDOSCABECERA SET CANTIDADITEMS=" + cantidadItems + " WHERE NUMERO=" + numeroPedido;
					db.execSQL(Sql);					
				}
				else{
					Sql = "UPDATE PEDIDOSCABECERA SET CANTIDADITEMS=" + cantidadItems + " WHERE NUMERO=" + numeroPedido;
					db.execSQL(Sql);	
				}
			}
			Sql = "UPDATE PEDIDOSCABECERA SET ESTADO=0 WHERE NUMERO=" + numeroPedido + " AND ESTADO<90";
			db.execSQL(Sql);
			Sql = "UPDATE PEDIDOSCUERPO SET ESTADO=0 WHERE NUMERO=" + numeroPedido + " AND ESTADO<90";
			db.execSQL(Sql);
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
			funcion.MostrarMensajeAceptar(conte, "ERROR AL FUNALIZAR EL PEDIDO", "Este PEDIDO, NO SE ENVIARÁ. " +
					"Pongase en contacto con la mesa de ayuda. Error: " + e.getMessage());
			return false;
		}
	}

	public boolean finalizarPedidoCompleto(long numeroPedido,String obs, long fecha){
		try {
			String obs1=obs.replace("Obs:","");
			String obs2=obs1.replace("%"," porciento ");
			String observacion=obs2.replace("#"," numeral ");
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql=""; 
			Sql = "SELECT COUNT(ESTADO) FROM PEDIDOSCUERPO WHERE NUMERO=" + numeroPedido + " AND ESTADO<90";
			Cursor cur = db.rawQuery(Sql, null);
			if (cur.moveToNext()) {
				int cantidadItems = cur.getInt(0);
				if (cantidadItems>0) {
					Sql = "UPDATE PEDIDOSCABECERA SET CANTIDADITEMS=" + cantidadItems + " WHERE NUMERO=" + numeroPedido;
					db.execSQL(Sql);					
				}
			}
			Sql = "UPDATE PEDIDOSCABECERA SET ESTADO=0,OBS='"+observacion+"',FECHAENTREGA="+fecha+",FECHAFIN="+new Date().getTime()+" WHERE NUMERO=" + numeroPedido + " AND ESTADO<90";
			db.execSQL(Sql);
			Sql = "UPDATE PEDIDOSCUERPO SET ESTADO=0 WHERE NUMERO=" + numeroPedido + " AND ESTADO<90";
			db.execSQL(Sql);
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
			funcion.MostrarMensajeAceptar(conte, "ERROR AL FUNALIZAR EL PEDIDO", "Este PEDIDO, NO SE ENVIARÁ. " +
					"Pongase en contacto con la mesa de ayuda. Error: " + e.getMessage());
			return false;
		}
	}
	
	public boolean anularPedido(long numeroPedido){
		try {
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql=""; 
			Sql = "UPDATE PEDIDOSCABECERA SET ESTADO=2 WHERE NUMERO=" + numeroPedido + " AND ESTADO<90";
			db.execSQL(Sql);
			Sql = "UPDATE PEDIDOSCUERPO SET ESTADO=2 WHERE NUMERO=" + numeroPedido + " AND ESTADO<90";
			db.execSQL(Sql);
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
			funcion.MostrarMensajeAceptar(conte, "ERROR", "Al intentar anular el pedido. " +
					"Pongase en contacto con la mesa de ayuda. Error: " + e.getMessage());
			return false;
		}
	}

	public boolean marcarParaEnviarPedidos(int dia) throws Exception{
		try {
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql="";
			Sql = "UPDATE PEDIDOSCABECERA SET ESTADO=11 WHERE ESTADO=0 AND NUMEROFINAL=0 AND DIA= "+dia;
			db.execSQL(Sql);
			Sql = "UPDATE PEDIDOSCUERPO SET ESTADO=11 WHERE ESTADO=0";
			db.execSQL(Sql);
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new Exception("ERROR: Al intentar marcar el pedidos para ser enviados. " +
					"Pongase en contacto con la mesa de ayuda. Error: " + e.getMessage());
		}
	}
	
	public boolean marcarParaEnviarPedidos() throws Exception{
		try {
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql="";
			Sql = "UPDATE PEDIDOSCABECERA SET ESTADO=11 WHERE ESTADO=0 AND NUMEROFINAL=0";
			db.execSQL(Sql);
			Sql = "UPDATE PEDIDOSCUERPO SET ESTADO=11 WHERE ESTADO=0";
			db.execSQL(Sql);
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new Exception("ERROR: Al intentar marcar el pedidos para ser enviados. " +
					"Pongase en contacto con la mesa de ayuda. Error: " + e.getMessage());
		}
	}
	
	public boolean marcarParaEnviarPedidosMail(int dia) throws Exception{
		try {
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql="";
			Sql = "UPDATE PEDIDOSCABECERA SET ESTADO=13 WHERE ESTADO IN(0,12) AND NUMEROFINAL=0 AND DIA= "+dia;
			db.execSQL(Sql);
			Sql = "UPDATE PEDIDOSCUERPO SET ESTADO=13 WHERE ESTADO IN(0,12)";
			db.execSQL(Sql);
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new Exception("ERROR: Al intentar marcar el pedidos para ser enviados. " +
					"Pongase en contacto con la mesa de ayuda. Error: " + e.getMessage());
		}
	}

	public List<Order> buscarPedidosParaEnviar(int dia) throws Exception{
		try {			
			List<Order> pedidos = new ArrayList<Order>();
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql ="";
			if(dia>0){
			 Sql = "SELECT * FROM PEDIDOSCABECERA AS A"
					+ " INNER JOIN VISITAS AS V ON A.CODIGOCLIENTE=V.CODIGOCLIENTE  "
					+ " WHERE ESTADO IN(11,12) AND A.DIA= "+dia
					+ " AND SUBSTR(V.DIAS," + dia +",1)='" + dia +"'"
					+ " AND NUMEROFINAL=0 AND A.CODIGOCLIENTE>0 AND A.CODIGOVENDEDOR>0";
			}else{
				 Sql = "SELECT * FROM PEDIDOSCABECERA AS A"
							+ " INNER JOIN VISITAS AS V ON A.CODIGOCLIENTE=V.CODIGOCLIENTE  "
							+ " WHERE ESTADO IN(11,12) AND A.DIA= "+dia
							+ " AND V.DIAS IN('0000000','8888888','9999999')"
							+ " AND NUMEROFINAL=0 AND A.CODIGOCLIENTE>0 AND A.CODIGOVENDEDOR>0";
			}
			
			Cursor cur = db.rawQuery(Sql, null);
			if (cur.getColumnCount()>0){
				while (cur.moveToNext()){
					Order pedido = new Order();
					pedido.setNumber(String.valueOf(cur.getInt(cur.getColumnIndex("NUMERO"))));
					pedido.setDate(String.valueOf(cur.getLong(cur.getColumnIndex("FECHA"))));
					pedido.setAvance(cur.getInt(cur.getColumnIndex("AVANCE")));
					pedido.setCodigoCliente(cur.getInt(cur.getColumnIndex("CODIGOCLIENTE")));
					pedido.setCodigoVendedor(cur.getInt(cur.getColumnIndex("CODIGOVENDEDOR")));
					pedido.setItem(String.valueOf(cur.getInt(cur.getColumnIndex("CANTIDADITEMS"))));
					pedido.setInternet(cur.getString(cur.getColumnIndex("INTERNET")));
					pedido.setLatitud(String.valueOf(cur.getDouble(cur.getColumnIndex("LATITUD"))));
					pedido.setLongitud(String.valueOf(cur.getDouble(cur.getColumnIndex("LONGITUD"))));
					pedido.setPrecision(String.valueOf(cur.getDouble(cur.getColumnIndex("PRECISION"))));
					pedido.setProvee(cur.getString(cur.getColumnIndex("PROVEE")));
					pedido.setObservacion(cur.getString(cur.getColumnIndex("OBS")));
					pedido.setFechaEntrega(cur.getLong(cur.getColumnIndex("FECHAENTREGA")));
					pedido.setFechainicio(cur.getLong(cur.getColumnIndex("FECHAINICIO")));
					pedido.setFechafin(cur.getLong(cur.getColumnIndex("FECHAFIN")));
					pedidos.add(pedido);
				}
			}
			return pedidos;
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception(e.getMessage());
		}
	}
	
	public List<Order> buscarPedidosParaEnviar() throws Exception{
		try {			
			List<Order> pedidos = new ArrayList<Order>();
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql ="";
			
			Sql = "SELECT * FROM PEDIDOSCABECERA AS A"
					+ " WHERE ESTADO IN(11,12)"
					+ " AND NUMEROFINAL=0 AND A.CODIGOCLIENTE>0 AND A.CODIGOVENDEDOR>0";
			
			Cursor cur = db.rawQuery(Sql, null);
			if (cur.getColumnCount()>0){
				while (cur.moveToNext()){
					Order pedido = new Order();
					pedido.setNumber(String.valueOf(cur.getInt(cur.getColumnIndex("NUMERO"))));
					pedido.setDate(String.valueOf(cur.getLong(cur.getColumnIndex("FECHA"))));
					pedido.setAvance(cur.getInt(cur.getColumnIndex("AVANCE")));
					pedido.setCodigoCliente(cur.getInt(cur.getColumnIndex("CODIGOCLIENTE")));
					pedido.setCodigoVendedor(cur.getInt(cur.getColumnIndex("CODIGOVENDEDOR")));
					pedido.setItem(String.valueOf(cur.getInt(cur.getColumnIndex("CANTIDADITEMS"))));
					pedido.setInternet(cur.getString(cur.getColumnIndex("INTERNET")));
					pedido.setLatitud(String.valueOf(cur.getDouble(cur.getColumnIndex("LATITUD"))));
					pedido.setLongitud(String.valueOf(cur.getDouble(cur.getColumnIndex("LONGITUD"))));
					pedido.setPrecision(String.valueOf(cur.getDouble(cur.getColumnIndex("PRECISION"))));
					pedido.setProvee(cur.getString(cur.getColumnIndex("PROVEE")));
					pedido.setObservacion(cur.getString(cur.getColumnIndex("OBS")));
					pedido.setFechaEntrega(cur.getLong(cur.getColumnIndex("FECHAENTREGA")));
					pedido.setFechainicio(cur.getLong(cur.getColumnIndex("FECHAINICIO")));
					pedido.setFechafin(cur.getLong(cur.getColumnIndex("FECHAFIN")));
					pedidos.add(pedido);
				}
			}
			return pedidos;
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception(e.getMessage());
		}
	}
	
	public List<Order> buscarPedidosParaEnviarMail(int dia) throws Exception{
		try {			
			List<Order> pedidos = new ArrayList<Order>();
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql ="";
			if(dia>0){
				Sql = "SELECT * FROM PEDIDOSCABECERA AS A"
					+ " INNER JOIN VISITAS AS V ON A.CODIGOCLIENTE=V.CODIGOCLIENTE  "
					+ " WHERE ESTADO IN(13,12) AND A.DIA= "+dia
					+ " AND SUBSTR(V.DIAS," + dia +",1)='" + dia +"'"
					+ " AND NUMEROFINAL=0 AND A.CODIGOCLIENTE>0 AND A.CODIGOVENDEDOR>0";
			}else{
				 Sql = "SELECT * FROM PEDIDOSCABECERA AS A"
							+ " INNER JOIN VISITAS AS V ON A.CODIGOCLIENTE=V.CODIGOCLIENTE  "
							+ " WHERE ESTADO IN(13,12) AND V.DIAS IN('0000000','8888888','9999999')"
							+ " AND NUMEROFINAL=0 AND A.CODIGOCLIENTE>0 AND A.CODIGOVENDEDOR>0";
			}
			Cursor cur = db.rawQuery(Sql, null);
			if (cur.getColumnCount()>0){
				while (cur.moveToNext()){
					Order pedido = new Order();
					pedido.setNumber(String.valueOf(cur.getInt(cur.getColumnIndex("NUMERO"))));
					pedido.setDate(String.valueOf(cur.getLong(cur.getColumnIndex("FECHA"))));
					pedido.setAvance(cur.getInt(cur.getColumnIndex("AVANCE")));
					pedido.setCodigoCliente(cur.getInt(cur.getColumnIndex("CODIGOCLIENTE")));
					pedido.setCodigoVendedor(cur.getInt(cur.getColumnIndex("CODIGOVENDEDOR")));
					pedido.setItem(String.valueOf(cur.getInt(cur.getColumnIndex("CANTIDADITEMS"))));
					pedido.setInternet(cur.getString(cur.getColumnIndex("INTERNET")));
					pedido.setLatitud(String.valueOf(cur.getDouble(cur.getColumnIndex("LATITUD"))));
					pedido.setLongitud(String.valueOf(cur.getDouble(cur.getColumnIndex("LONGITUD"))));
					pedido.setPrecision(String.valueOf(cur.getDouble(cur.getColumnIndex("PRECISION"))));
					pedido.setProvee(cur.getString(cur.getColumnIndex("PROVEE")));
					pedido.setObservacion(cur.getString(cur.getColumnIndex("OBS")));
					pedido.setFechaEntrega(cur.getLong(cur.getColumnIndex("FECHAENTREGA")));
					pedidos.add(pedido);
				}
			}
			return pedidos;
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception(e.getMessage());
		}
	}
	
	public List<OrderDetail> buscarItemsPorPedido(int numero) throws Exception{
		try {
			List<OrderDetail> items = new ArrayList<OrderDetail>();
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql = "SELECT * FROM PEDIDOSCUERPO WHERE NUMERO=" + numero+" AND (ESTADO=11 OR ESTADO=12)";
			Cursor cur = db.rawQuery(Sql, null);
			if (cur.getColumnCount()>0){
				while (cur.moveToNext()){
					OrderDetail item = new OrderDetail();
					item.setNumero(cur.getInt(cur.getColumnIndex("NUMERO")));
					item.setCodigo(cur.getString(cur.getColumnIndex("CODIGOARTICULO")));
					item.setItem(String.valueOf(cur.getInt(cur.getColumnIndex("NUMEROITEM"))));
					item.setCantidad(String.valueOf(cur.getDouble(cur.getColumnIndex("CANTIDAD"))));
					item.setPrecio(String.valueOf(cur.getDouble(cur.getColumnIndex("PRECIO"))));
					item.setDescuento(String.valueOf(cur.getDouble(cur.getColumnIndex("DESCUENTO"))));
					items.add(item);
				}
			}	
			return items;
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception(e.getMessage());
		}
	}
	
	public List<OrderDetail> buscarItemsPorPedidoMail(int numero) throws Exception{
		try {
			List<OrderDetail> items = new ArrayList<OrderDetail>();
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql = "SELECT * FROM PEDIDOSCUERPO WHERE NUMERO=" + numero+" AND ESTADO=13";
			Cursor cur = db.rawQuery(Sql, null);
			if (cur.getColumnCount()>0){
				while (cur.moveToNext()){
					OrderDetail item = new OrderDetail();
					item.setNumero(cur.getInt(cur.getColumnIndex("NUMERO")));
					item.setCodigo(cur.getString(cur.getColumnIndex("CODIGOARTICULO")));
					item.setItem(String.valueOf(cur.getInt(cur.getColumnIndex("NUMEROITEM"))));
					item.setCantidad(String.valueOf(cur.getDouble(cur.getColumnIndex("CANTIDAD"))));
					item.setPrecio(String.valueOf(cur.getDouble(cur.getColumnIndex("PRECIO"))));
					item.setDescuento(String.valueOf(cur.getDouble(cur.getColumnIndex("DESCUENTO"))));
					items.add(item);
				}
			}		
			return items;
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception(e.getMessage());
		}
	}
	
	public boolean cambiarCantidadEnitem(double cantidad,double descuento,int cliente,OrderDetail item){
		try {
			BusquedaArticulos busArt = new BusquedaArticulos(conte);
			Articulos art = busArt.buscarPorCodigo(item.getCodigo());
			double precio_art=0;
			if (art.getOferta()>0){
				precio_art=Double.parseDouble(funcion.formatDecimal(art.getOferta(), 2));
			} else {
				precio_art=Double.parseDouble(busArt.precioPorLista(cliente, art));
			}
			double precio_descuento=(precio_art-descuento)/100;
			double precio=precio_art-precio_descuento;
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql="UPDATE PEDIDOSCUERPO SET CANTIDAD=" + cantidad + ",DESCUENTO="+descuento+",PRECIO="+precio+" WHERE NUMERO=" + item.getNumero() + " AND NUMEROITEM=" + item.getItem(); 
			db.execSQL(Sql);
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			funcion.MostrarMensajeAceptar(conte, "ERROR AL INTENTAR CAMBIAR LA CANTIDAD DE UN ITEM", 
					"Se ha producido un error al intentar cambiar la cantidad del item " +
					"seleccionado. Error con el dispositivo. Error: " + e.getMessage());
			return false;
		}
	}
	
	public boolean borrarItemPedido(OrderDetail item){
		try {
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql = "UPDATE PEDIDOSCUERPO SET ESTADO=99 WHERE NUMERO=" + item.getNumero() + " AND NUMEROITEM=" + item.getItem();
			db.execSQL(Sql);
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			funcion.MostrarMensajeAceptar(conte, "ERROR AL INTENTAR BORRAR UN ITEM", 
					"Se ha producido un error al intentar un item " +
					"seleccionado. Error con el dispositivo. Error: " + e.getMessage());			
			return false;
		}
	}
	
	public void sumarCantidadImpresindibles(int codigoCliente, String codigoArticulo, double cantidad) {
		try {
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql = "UPDATE ARTINDISPENSABLES SET CANTIDADVTA=CANTIDADVTA+" + cantidad + 
					" WHERE CODIGOCLIENTE=" + codigoCliente + " AND CODIGOARTICULO='" + codigoArticulo + "'";
			db.execSQL(Sql);
		} catch (SQLException e) {
			e.printStackTrace();
			funcion.MostrarMensajeAceptar(conte, "ERROR AL INTENTAR CORREGIR DATOS EN ARTICULOS ESPECIALES", 
					" Error con el dispositivo. Error: " + e.getMessage());			
		}
	}
	
	public void restarCantidadImpresindibles(int codigoCliente, String codigoArticulo, double cantidad) {
		try {
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql = "UPDATE ARTINDISPENSABLES SET CANTIDADVTA=CANTIDADVTA-" + cantidad + 
					" WHERE CODIGOCLIENTE=" + codigoCliente + " AND CODIGOARTICULO='" + codigoArticulo + "'";
			db.execSQL(Sql);
		} catch (SQLException e) {
			e.printStackTrace();
			funcion.MostrarMensajeAceptar(conte, "ERROR AL INTENTAR CORREGIR DATOS EN ARTICULOS ESPECIALES", 
					" Error con el dispositivo. Error: " + e.getMessage());			
		}
	}

	public void sumarCantidadLanzamientos(int codigoCliente, String codigoArticulo, double cantidad) {
		try {
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql = "UPDATE ARTLANZAMIENTOS SET CANTIDADVTA=CANTIDADVTA+" + cantidad + 
					" WHERE CODIGOCLIENTE=" + codigoCliente + " AND CODIGOARTICULO='" + codigoArticulo + "'";
			db.execSQL(Sql);
		} catch (SQLException e) {
			e.printStackTrace();
			funcion.MostrarMensajeAceptar(conte, "ERROR AL INTENTAR CORREGIR DATOS EN ARTICULOS ESPECIALES", 
					" Error con el dispositivo. Error: " + e.getMessage());			
		}
	}
	
	public void restarCantidadLanzamientos(int codigoCliente, String codigoArticulo, double cantidad) {
		try {
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql = "UPDATE ARTLANZAMIENTOS SET CANTIDADVTA=CANTIDADVTA-" + cantidad + 
					" WHERE CODIGOCLIENTE=" + codigoCliente + " AND CODIGOARTICULO='" + codigoArticulo + "'";
			db.execSQL(Sql);
		} catch (SQLException e) {
			e.printStackTrace();
			funcion.MostrarMensajeAceptar(conte, "ERROR AL INTENTAR CORREGIR DATOS EN ARTICULOS ESPECIALES", 
					" Error con el dispositivo. Error: " + e.getMessage());			
		}
	}
	
	public int buscarCantidadAcumulada(long numero){
			int cantidad=0;
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql = "SELECT * FROM PEDIDOSCUERPO WHERE NUMERO=" + numero+" AND ESTADO<90";
			Cursor cur = db.rawQuery(Sql, null);
			if (cur.getColumnCount()>0){
				while (cur.moveToNext()){	
					String codigo=cur.getString(cur.getColumnIndex("CODIGOARTICULO"));
					int cant=buscarCombo(Integer.parseInt(codigo));
					if(cant>0){
						cantidad+=cant;
					}else{
						cantidad+=1;
					}
				}
			}	
			return cantidad;
	}
	
	public int buscarCombo(int codigo){
		int cantidad= 0;
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();	
		String Sql = "SELECT * FROM COMBOS WHERE CODIGO=" + codigo ;
		Cursor cur = db.rawQuery(Sql, null);
		if (cur.getCount()>0){
			while(cur.moveToNext()){
				cantidad= cur.getInt(cur.getColumnIndex("CANTIDAD"));
		     }
		} else {
			cantidad=0;
		}
		return cantidad;
}
	
	/**/
	

	public List<OrderDetail>  listarItemsDelPedidos(long numero){
		
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();
		
		String Sql = "SELECT * FROM PEDIDOSCUERPO WHERE NUMERO=" + numero + " AND ESTADO<90 ORDER BY NUMEROITEM";
		Cursor cur = db.rawQuery(Sql, null);
		if (cur.getCount()>0){
			List<OrderDetail>list=new ArrayList<OrderDetail>();
			while (cur.moveToNext()){
				BusquedaArticulos busArt = new BusquedaArticulos(conte);
				String codigoArticulo = cur.getString(cur.getColumnIndex("CODIGOARTICULO")); 
				Articulos art = busArt.buscarPorCodigo(codigoArticulo);
				if (art!=null){
					OrderDetail detail=new OrderDetail();
					detail.setItem(funcion.format(cur.getInt(cur.getColumnIndex("NUMEROITEM")),3));
					detail.setDescripcion(art.getDetalle());
					detail.setCantidad(String.valueOf(cur.getDouble(cur.getColumnIndex("CANTIDAD"))));
					detail.setDescuento(String.valueOf(cur.getDouble(cur.getColumnIndex("DESCUENTO"))));
					if(cur.getDouble(cur.getColumnIndex("DESCUENTO"))<10){
						detail.setColor_descuento(Color.parseColor("#008000"));
					}else if(cur.getDouble(cur.getColumnIndex("DESCUENTO"))>=10 && cur.getDouble(cur.getColumnIndex("DESCUENTO"))<=22){
						detail.setColor_descuento(Color.parseColor("#FF8C00"));
					}else{
						detail.setColor_descuento(Color.RED);
					}
					detail.setPrecio(funcion.formatDecimal(cur.getDouble(cur.getColumnIndex("PRECIO")),4));
					
					list.add(detail);
				}
			}
			return list;
		} else {
			return null;
		}
		
	}
	
	public OrderDetail buscarItem(long numero, int item){
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();
		
		String Sql = "SELECT * FROM PEDIDOSCUERPO WHERE NUMERO=" + numero + " AND NUMEROITEM=" + item;
		Cursor cur = db.rawQuery(Sql, null);
		if (cur.moveToNext()){
			OrderDetail items = new OrderDetail();
			items.setNumero(cur.getLong(cur.getColumnIndex("NUMERO")));
			items.setCodigo(cur.getString(cur.getColumnIndex("CODIGOARTICULO")));
			items.setCantidad(String.valueOf(cur.getDouble(cur.getColumnIndex("CANTIDAD"))));
			items.setDescuento((String.valueOf(cur.getDouble(cur.getColumnIndex("DESCUENTO")))));
			items.setPrecio(String.valueOf(cur.getDouble(cur.getColumnIndex("PRECIO"))));
			items.setItem(String.valueOf(cur.getInt(cur.getColumnIndex("NUMEROITEM"))));
			items.setEstado(cur.getInt(cur.getColumnIndex("ESTADO")));
			return items;
		} else {
			return null;
		}
	}
	
	public void pedidoEnviadoCorrectamente(int numero_pedido){
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();
		String Sql = "UPDATE PEDIDOSCABECERA SET ESTADO=1 WHERE (ESTADO=11 OR ESTADO=12) AND NUMERO=" +numero_pedido;
		db.execSQL(Sql);
	}
	
	public void pedidoConErrorAlEnvio(int numero_pedido){
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();
		String Sql = "UPDATE PEDIDOSCABECERA SET ESTADO=12 WHERE ESTADO=11 AND NUMERO=" +  numero_pedido;
		db.execSQL(Sql);
		Sql = "UPDATE PEDIDOSCUERPO SET ESTADO=12 WHERE ESTADO=11 AND NUMERO=" +  numero_pedido;
		db.execSQL(Sql);	
	}
	
	public void eliminarItem(long numeroPedido){
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();
		String Sql=""; 
		Sql = "SELECT COUNT(ESTADO) FROM PEDIDOSCUERPO WHERE NUMERO=" + numeroPedido + " AND ESTADO<90";
		Cursor cur = db.rawQuery(Sql, null);
		if (cur.moveToNext()) {
			int cantidadItems = cur.getInt(0);
			if (cantidadItems>0) {
				Sql = "UPDATE PEDIDOSCABECERA SET CANTIDADITEMS=" + cantidadItems + " WHERE NUMERO=" + numeroPedido;
				db.execSQL(Sql);
			}else{
				Sql = "UPDATE PEDIDOSCABECERA SET CANTIDADITEMS=" + cantidadItems + " WHERE NUMERO=" + numeroPedido;
				db.execSQL(Sql);
			}
		}
	}
	
	public Order buscarDetallePedido(long numero_pedido)throws Exception{
		try{
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null,funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql = "SELECT * FROM PEDIDOSCABECERA WHERE NUMERO="+numero_pedido;
			Cursor cur = db.rawQuery(Sql, null);
			Order pedido = null;
			if (cur.moveToNext()) {
				pedido = new Order();
				pedido.setNumber(String.valueOf(cur.getInt(cur.getColumnIndex("NUMERO"))));
				pedido.setNumber_final(String.valueOf(cur.getInt(cur.getColumnIndex("NUMEROFINAL"))));
				pedido.setDate(String.valueOf(cur.getLong(cur.getColumnIndex("FECHA"))));
				pedido.setAvance(cur.getInt(cur.getColumnIndex("AVANCE")));
				pedido.setCodigoCliente(cur.getInt(cur.getColumnIndex("CODIGOCLIENTE")));
				pedido.setCodigoVendedor(cur.getInt(cur.getColumnIndex("CODIGOVENDEDOR")));
				pedido.setItem(String.valueOf(cur.getInt(cur.getColumnIndex("CANTIDADITEMS"))));
				pedido.setInternet(cur.getString(cur.getColumnIndex("INTERNET")));
				pedido.setLatitud(String.valueOf(cur.getDouble(cur.getColumnIndex("LATITUD"))));
				pedido.setLongitud(String.valueOf(cur.getDouble(cur.getColumnIndex("LONGITUD"))));
				pedido.setPrecision(String.valueOf(cur.getDouble(cur.getColumnIndex("PRECISION"))));
				pedido.setProvee(cur.getString(cur.getColumnIndex("PROVEE")));
				pedido.setObservacion(cur.getString(cur.getColumnIndex("OBS")));
				pedido.setFechaEntrega(cur.getLong(cur.getColumnIndex("FECHAENTREGA")));
				pedido.setEstado(cur.getInt(cur.getColumnIndex("ESTADO")));
		    }
			return pedido;
		}catch(Exception ex){
			throw new Exception(ex.getMessage());
		}
	}
	
	public void modificarPedidoConector(Order order){
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();
		ContentValues cont = new ContentValues();
		cont.clear();
		cont.put("NUMEROFINAL", Integer.parseInt(order.getNumber_final()));
		cont.put("FECHAENVIADO", Long.valueOf(order.getDate()));
		cont.put("ESTADO",1);
		db.update("PEDIDOSCABECERA", cont, "NUMERO=" + Integer.valueOf(order.getNumber()) + " AND (ESTADO=12 OR ESTADO=11)", null);
		cont.clear();
		cont.put("FECHAENVIADO", Long.valueOf(order.getDate()));
		cont.put("ESTADO",1);
		db.update("PEDIDOSCUERPO", cont, "NUMERO=" + Integer.valueOf(order.getNumber()) + " AND (ESTADO=12 OR ESTADO=11)", null);
	}
}
