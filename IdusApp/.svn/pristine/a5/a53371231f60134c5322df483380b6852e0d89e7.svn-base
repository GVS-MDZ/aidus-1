package com.gvs.idusapp;

import java.util.Date;

import com.gvs.busquedas.BusquedaConfiguracion;
import com.gvs.busquedas.BusquedaInforme;
import com.gvs.busquedas.BusquedaSincronizacion;
import com.gvs.busquedas.BusquedaUsuario;
import com.gvs.busquedas.BusquedasCierreDeDia;
import com.gvs.conectoras.ConectorGeneral;
import com.gvs.conectoras.ConectorUsuario;
import com.gvs.entidades.Configuracion;
import com.gvs.entidades.Log;
import com.gvs.entidades.Usuario;
import com.gvs.utilidades.Funciones;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.PorterDuff;
import android.os.Bundle;
import android.os.Handler;
import android.os.StrictMode;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ProgressBar;

public class LoginActivity extends Activity {
	
	private Button btnLogin;
	private EditText txt_usuario, txt_contrasena;
	private ProgressBar cargando;
	private Configuracion configuracion;
	private Funciones funcion;
	private ConectorGeneral conectorUsuario;
	private BusquedaUsuario controladorUsuario;
	private BusquedaSincronizacion controladorSincronizador;
	private BusquedasCierreDeDia busquedaCierre;
	private Bundle bun;
	private BusquedaConfiguracion busquedaConfiguracion;
	private Handler handler;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_login);
		//permite el acceso a red no funcionaba con esta version(solo menor a la api 9) se coloco este codigo para forzar la coneccion http
		if (android.os.Build.VERSION.SDK_INT > 9) {
		    StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
		    StrictMode.setThreadPolicy(policy);
		}
		bun = new Bundle();
		handler = new Handler();
		funcion=new Funciones(this);
		btnLogin = (Button) findViewById(R.id.btn_login);
		txt_usuario = (EditText) findViewById(R.id.txt_usuario);
		txt_contrasena = (EditText) findViewById(R.id.txt_contrasena);
		cargando=(ProgressBar)findViewById(R.id.cargando);
		cargando.getIndeterminateDrawable().setColorFilter(Color.parseColor("#a085bd"), android.graphics.PorterDuff.Mode.MULTIPLY);
		configuracion = new Configuracion();
		controladorUsuario = new BusquedaUsuario();
		controladorSincronizador = new BusquedaSincronizacion(LoginActivity.this);
		busquedaConfiguracion=new BusquedaConfiguracion(this);
		txt_usuario.getBackground().setColorFilter(Color.parseColor("#a085bd"), PorterDuff.Mode.SRC_ATOP);
		txt_contrasena.getBackground().setColorFilter(Color.parseColor("#a085bd"), PorterDuff.Mode.SRC_ATOP);
		
		btnLogin.setOnClickListener(new OnClickListener() {
	
			@Override
			public void onClick(View v) {
				configuracion = busquedaConfiguracion.buscarConfiguracion();
				conectorUsuario = new ConectorUsuario(configuracion,txt_usuario.getText().toString(), txt_contrasena.getText().toString(), LoginActivity.this);
				try {	
					if (funcion.conexionInternet()) {
						cargando.setVisibility(1);
						Thread thread = new Thread() {
							public void run() {
								handler.post(new Runnable() {
									@Override
									public void run() {
										try{
											if (conectorUsuario.correr(LoginActivity.this)) {
												Usuario usuario = controladorUsuario.validarUsuario(LoginActivity.this,txt_usuario.getText().toString(),txt_contrasena.getText().toString());
												if (usuario != null) {
													BusquedaInforme controlador_log=new BusquedaInforme(LoginActivity.this);
													Log log =new Log();
													log.setDescripcion("LOGIN");
													log.setTipo(1);
													log.setFecha(new Date().getTime());
													log.setEstado(0);
													log.setVendedor(usuario.getCodigo());
													controlador_log.guardarLog(log);
													busquedaCierre=new BusquedasCierreDeDia(LoginActivity.this, usuario.getCodigo());
													boolean realizo_cierre=busquedaCierre.realizoCierreDiaAnterior(usuario.getCodigo());
													if(realizo_cierre){		
														controladorUsuario.iniciarSesion(LoginActivity.this,txt_usuario.getText().toString(),txt_contrasena.getText().toString());
														bun.putInt("EMPRESA", usuario.getEmpresa());
														bun.putInt("VENDEDOR", usuario.getCodigo());								
														if (controladorSincronizador.realizoSincronizacionGeneral(LoginActivity.this, "T",usuario.getEmpresa(),usuario.getCodigo())) {	
															Intent intent = new Intent(LoginActivity.this,WorkDayActivity.class);
															intent.putExtras(bun);
															startActivity(intent);
															finish();
														} else {
															Intent intent = new Intent(LoginActivity.this,SyncActivity.class);
															bun.putString("SINCRONIZACION", "INICIO");
															intent.putExtras(bun);
															startActivity(intent);
															finish();
														}
												  }else{
													  cargando.setVisibility(View.INVISIBLE);
													  cierreDeDia(usuario);
												  }
												} else {
													cargando.setVisibility(View.INVISIBLE);
													funcion.MostrarMensajeAceptar(LoginActivity.this,"Acceso Denegado","El usuario o contraseña es incorrecta.");
												}
											} else {
												cargando.setVisibility(View.INVISIBLE);
												Usuario usuario = controladorUsuario.validarUsuario(LoginActivity.this,txt_usuario.getText().toString(),txt_contrasena.getText().toString());
												if (usuario != null) {
													eleccion("Sin Conexion al Servidor","La información puede no estar actualizada, y los pedidos no se entregarán. \n"
																	+ "Esta acción es de su entera responsabilidad \n"
																	+ "¿Desea continuar?", usuario);
												} else {
													funcion.MostrarMensajeAceptar(LoginActivity.this,"Acceso Denegado","El usuario o contraseña es incorrecta.");
												}
											}
										}catch(Exception ex){
											cargando.setVisibility(View.INVISIBLE);
											Usuario usuario = controladorUsuario.validarUsuario(LoginActivity.this, txt_usuario.getText().toString(), txt_contrasena.getText().toString());
											if (usuario != null) {
												eleccion("Sin Conexion al Servidor","La información puede no estar actualizada, y los pedidos no se entregarán. \n"
														+ "Esta acción es de su entera responsabilidad \n"
														+ "¿Desea continuar?", usuario);
											} else {
												funcion.MostrarMensajeAceptar(LoginActivity.this,"Acceso Denegado","El usuario o contraseña es incorrecta.");
											}
										}
									}
								});
							}
						};
						thread.start();
						
					} else {
						Usuario usuario = controladorUsuario.validarUsuario(LoginActivity.this, txt_usuario.getText().toString(), txt_contrasena.getText().toString());
						if (usuario != null) {
							eleccion("Sin Internet","La información puede no estar actualizada, y los pedidos no se entregarán. \n"
											+ "Esta acción es de su entera responsabilidad \n"
											+ "¿Desea continuar?", usuario);
						} else {
							funcion.MostrarMensajeAceptar(LoginActivity.this,"Acceso Denegado","El usuario o contraseña es incorrecta.");
						}
					}
				
				} catch (Exception e) {
					Usuario usuario = controladorUsuario.validarUsuario(LoginActivity.this, txt_usuario.getText().toString(), txt_contrasena.getText().toString());
					if (usuario != null) {
						eleccion("Sin Conexion al Servidor","La información puede no estar actualizada, y los pedidos no se entregarán. \n"
								+ "Esta acción es de su entera responsabilidad \n"
								+ "¿Desea continuar?", usuario);
					} else {
						funcion.MostrarMensajeAceptar(LoginActivity.this,"Acceso Denegado","El usuario o contraseña es incorrecta.");
					}
				}
			}
		});

	}

	public void eleccion(String titulo, String cadena, final Usuario usuario) {
		AlertDialog.Builder alertbox = new AlertDialog.Builder(this);
		alertbox.setTitle(titulo);
		alertbox.setMessage(cadena);
		alertbox.setPositiveButton("Si", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface arg0, int arg1) {
				mensaje(true, usuario);
			}
		});
		alertbox.setNegativeButton("No", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface arg0, int arg1) {
				mensaje(false, null);
			}
		});
		alertbox.show();
	}
			
	public void cierreDeDia(final Usuario usuario) {
		
		AlertDialog.Builder alertbox = new AlertDialog.Builder(this);
		alertbox.setTitle("Cierre de dia");
		alertbox.setMessage("La ultima vez no realizo el cierre de dia obligatorio \n ¿Desea realizarlo?");
		alertbox.setPositiveButton("Si", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface arg0, int arg1) {
				try{
					BusquedaInforme controlador_log=new BusquedaInforme(LoginActivity.this);
					Log log =new Log();
					log.setDescripcion("CIERRE DIA ANTERIOR");
				    log.setTipo(2);
					log.setFecha(new Date().getTime());
					log.setEstado(0);
					log.setVendedor(usuario.getCodigo());
					controlador_log.guardarLog(log);
					busquedaCierre=new BusquedasCierreDeDia(LoginActivity.this, usuario.getCodigo());
					busquedaCierre.realizarCierreDiaPendiente();						
					Intent intent = new Intent(LoginActivity.this,SyncActivity.class);
					bun.putInt("EMPRESA", usuario.getEmpresa());
					bun.putInt("VENDEDOR", usuario.getCodigo());	
					bun.putString("SINCRONIZACION", "INICIO");
					intent.putExtras(bun);
					startActivity(intent);
					finish();
				}catch(Exception ex){
					
				}
			}
		});
		alertbox.setNegativeButton("No", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface arg0, int arg1) {
				finish();
			}
		});
		
		alertbox.show();
		
	}
	
	private void mensaje(boolean respuesta, Usuario usuario) {
		if (respuesta) {
			Bundle bun = new Bundle();
			bun.putInt("EMPRESA", usuario.getEmpresa());
			bun.putInt("VENDEDOR", usuario.getCodigo());
			Intent intent = new Intent(LoginActivity.this,WorkDayActivity.class);
			intent.putExtras(bun);
			startActivity(intent);
		}
	}

}


