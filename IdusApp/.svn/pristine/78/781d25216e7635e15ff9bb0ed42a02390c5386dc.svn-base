package com.gvs.controladores;

import java.util.Collection;
import java.util.List;
import java.util.Vector;

import com.gvs.busquedas.BusquedaArticulos;
import com.gvs.entidades.ItemPedido;
import com.gvs.entidades.Pedido;
import com.gvs.exceptiones.ExceptionPedido;
import com.gvs.idusapp.ResumeActivity;
import com.gvs.utilidades.BaseDeDatos;
import com.gvs.utilidades.Funciones;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;

public class ControladorPedido {
	private Context conte;
	private Funciones funcion = new Funciones();
	
	public ControladorPedido(Context cont){
		conte=cont;
	}
	
	public long numeroPedido(){
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();
		
		String sql = "SELECT MAX(NUMERO) FROM PEDIDOSCABECERA";
		Cursor cur = db.rawQuery(sql, null);
		if (cur.moveToNext()){
			if (cur.getString(0)!=null){
				return (cur.getLong(0) + 1);
			} else {
				return 1;
			}
		} else {
			return 1;
		}
		
	}

	public int numeroItesmPorPedido(long numeroPedido){
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();
		
		String sql = "SELECT MAX(NUMEROITEM) FROM PEDIDOSCUERPO WHERE NUMERO=" + numeroPedido + " AND ESTADO<90";
		Cursor cur = db.rawQuery(sql, null);
		if (cur.moveToNext()){
			if (cur.getString(0)!=null){
				return (cur.getInt(0) + 1);
			} else {
				return 0;
			}
		} else {
			return 0;
		}
		
	}
	
	public double totalPedido(long numeroPedido){
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();
		
		String sql = "SELECT SUM(CANTIDAD*PRECIO) FROM PEDIDOSCUERPO WHERE NUMERO=" + numeroPedido + " AND ESTADO<90";
		Cursor cur = db.rawQuery(sql, null);
		if (cur.moveToNext()){
			if (cur.getString(0)!=null){
				return cur.getDouble(0);
			} else {
				return 0;
			}
		} else {
			return 0;
		}
		
	}
	
	public int grabarPedido(ContentValues contCab, ContentValues contCue) throws ExceptionPedido{
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();
		try {			
			String Sql = "";
			Cursor cur;					
		
			Sql = "SELECT * FROM PEDIDOSCABECERA WHERE NUMERO=" + contCab.getAsLong("NUMERO");
			cur = db.rawQuery(Sql, null);
			if (cur.moveToNext()) {
				db.update("PEDIDOSCABECERA", contCab, "NUMERO=" + contCab.getAsLong("NUMERO"), null);
			} else {
				db.insert("PEDIDOSCABECERA", null, contCab);
			}
			
			Sql = "SELECT * FROM PEDIDOSCUERPO WHERE NUMERO=" + contCue.getAsLong("NUMERO") + " AND NUMEROITEM=" + contCue.getAsInteger("NUMEROITEM");
			cur = db.rawQuery(Sql, null);
			if (cur.moveToNext()){
				db.update("PEDIDOSCUERPO", contCue, "NUMERO=" + contCue.getAsLong("NUMERO") + " AND NUMEROITEM=" + contCue.getAsInteger("NUMEROITEM"), null);
			} else {
				db.insert("PEDIDOSCUERPO", null, contCue);
			}

			return numeroItesmPorPedido(contCab.getAsInteger("NUMERO"));
						
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			throw new ExceptionPedido(e.getMessage());
		} 
	}
		
	
	public boolean finalizarPedido(long numeroPedido){
		try {
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql=""; 
			Sql = "SELECT COUNT(ESTADO) FROM PEDIDOSCUERPO WHERE NUMERO=" + numeroPedido + " AND ESTADO<90";
			Cursor cur = db.rawQuery(Sql, null);
			if (cur.moveToNext()) {
				int cantidadItems = cur.getInt(0);
				if (cantidadItems>0) {
					Sql = "UPDATE PEDIDOSCABECERA SET CANTIDADITEMS=" + cantidadItems + " WHERE NUMERO=" + numeroPedido;
					db.execSQL(Sql);					
				}
			}
			Sql = "UPDATE PEDIDOSCABECERA SET ESTADO=0 WHERE NUMERO=" + numeroPedido + " AND ESTADO<90";
			db.execSQL(Sql);
			Sql = "UPDATE PEDIDOSCUERPO SET ESTADO=0 WHERE NUMERO=" + numeroPedido + " AND ESTADO<90";
			db.execSQL(Sql);
			return true;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			funcion.MostrarMensajeAceptar(conte, "ERROR AL FUNALIZAR EL PEDIDO", "Este PEDIDO, NO SE ENVIARÁ. " +
					"Pongase en contacto con la mesa de ayuda. Error: " + e.getMessage());
			return false;
		}
	}
	public boolean finalizarPedidoCompleto(long numeroPedido,String observacion, long fecha){
		try {
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql=""; 
			Sql = "SELECT COUNT(ESTADO) FROM PEDIDOSCUERPO WHERE NUMERO=" + numeroPedido + " AND ESTADO<90";
			Cursor cur = db.rawQuery(Sql, null);
			if (cur.moveToNext()) {
				int cantidadItems = cur.getInt(0);
				if (cantidadItems>0) {
					Sql = "UPDATE PEDIDOSCABECERA SET CANTIDADITEMS=" + cantidadItems + " WHERE NUMERO=" + numeroPedido;
					db.execSQL(Sql);					
				}
			}
			Sql = "UPDATE PEDIDOSCABECERA SET ESTADO=0,OBS='"+observacion+"',FECHAENTREGA="+fecha+" WHERE NUMERO=" + numeroPedido + " AND ESTADO<90";
			db.execSQL(Sql);
			Sql = "UPDATE PEDIDOSCUERPO SET ESTADO=0 WHERE NUMERO=" + numeroPedido + " AND ESTADO<90";
			db.execSQL(Sql);
			return true;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			funcion.MostrarMensajeAceptar(conte, "ERROR AL FUNALIZAR EL PEDIDO", "Este PEDIDO, NO SE ENVIARÁ. " +
					"Pongase en contacto con la mesa de ayuda. Error: " + e.getMessage());
			return false;
		}
	}
	
	public boolean anularPedido(long numeroPedido){
		try {
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql=""; 
			Sql = "UPDATE PEDIDOSCABECERA SET ESTADO=2 WHERE NUMERO=" + numeroPedido + " AND ESTADO<90";
			db.execSQL(Sql);
			Sql = "UPDATE PEDIDOSCUERPO SET ESTADO=2 WHERE NUMERO=" + numeroPedido + " AND ESTADO<90";
			db.execSQL(Sql);
			return true;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			funcion.MostrarMensajeAceptar(conte, "ERROR", "Al intentar anular el pedido. " +
					"Pongase en contacto con la mesa de ayuda. Error: " + e.getMessage());
			return false;
		}
	}

	public boolean marcarParaEnviarPedido(long numeroPedido){
		try {
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql=""; 
			Sql = "UPDATE PEDIDOSCABECERA SET ESTADO=11 WHERE NUMERO=" + numeroPedido + " AND ESTADO<90";
			db.execSQL(Sql);
			Sql = "UPDATE PEDIDOSCUERPO SET ESTADO=11 WHERE NUMERO=" + numeroPedido + " AND ESTADO<90";
			db.execSQL(Sql);
			return true;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			funcion.MostrarMensajeAceptar(conte, "ERROR ", "Al intentar marcar el pedido para ser enviado nuevamente. " +
					"Pongase en contacto con la mesa de ayuda. Error: " + e.getMessage());
			return false;
		}
	}
	
	public boolean marcarParaEnviarPedidos() throws ExceptionPedido{
		try {
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql="";
			Sql = "UPDATE PEDIDOSCABECERA SET ESTADO=11 WHERE ESTADO=0 AND NUMEROFINAL=0";
			db.execSQL(Sql);
			Sql = "UPDATE PEDIDOSCUERPO SET ESTADO=11 WHERE ESTADO=0";
			db.execSQL(Sql);
			return true;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new ExceptionPedido("ERROR: Al intentar marcar el pedidos para ser enviados. " +
					"Pongase en contacto con la mesa de ayuda. Error: " + e.getMessage());
		}
	}

	public List<Pedido> buscarPedidosParaEnviar() throws ExceptionPedido{
		try {
			Vector<Pedido> pedidos = new Vector<Pedido>();
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql = "SELECT * FROM PEDIDOSCABECERA WHERE ESTADO=11 AND NUMEROFINAL=0 AND CODIGOCLIENTE>0 AND CODIGOVENDEDOR>0";
			Cursor cur = db.rawQuery(Sql, null);
			if (cur.getColumnCount()>0){
				while (cur.moveToNext()){
					Pedido pedido = new Pedido();
					pedido.setNumero(cur.getInt(cur.getColumnIndex("NUMERO")));
					pedido.setFecha(cur.getLong(cur.getColumnIndex("FECHA")));
					pedido.setAvance(cur.getInt(cur.getColumnIndex("AVANCE")));
					pedido.setCodigoCliente(cur.getInt(cur.getColumnIndex("CODIGOCLIENTE")));
					pedido.setCodigoVendedor(cur.getInt(cur.getColumnIndex("CODIGOVENDEDOR")));
					pedido.setCantidadItems(cur.getInt(cur.getColumnIndex("CANTIDADITEMS")));
					pedido.setInternet(cur.getString(cur.getColumnIndex("INTERNET")));
					pedido.setLatitud(String.valueOf(cur.getDouble(cur.getColumnIndex("LATITUD"))));
					pedido.setLongitud(String.valueOf(cur.getDouble(cur.getColumnIndex("LONGITUD"))));
					pedido.setPrecision(String.valueOf(cur.getDouble(cur.getColumnIndex("PRECISION"))));
					pedido.setProvee(cur.getString(cur.getColumnIndex("PROVEE")));
					pedido.setObservacion(cur.getString(cur.getColumnIndex("OBS")));
					pedido.setFechaEntrega(cur.getLong(cur.getColumnIndex("FECHAENTREGA")));
					pedidos.add(pedido);
				}
			}
			return pedidos;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new ExceptionPedido(e.getMessage());
		}
	}
	
	public Collection<ItemPedido> buscarItemsPorPedido(int numero) throws ExceptionPedido{
		try {
			Vector<ItemPedido> items = new Vector<ItemPedido>();
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql = "SELECT * FROM PEDIDOSCUERPO WHERE ESTADO=11 AND NUMERO=" + numero;
			Cursor cur = db.rawQuery(Sql, null);
			if (cur.getColumnCount()>0){
				while (cur.moveToNext()){
					ItemPedido item = new ItemPedido();
					item.setNumero(cur.getInt(cur.getColumnIndex("NUMERO")));
					item.setCodigo(cur.getString(cur.getColumnIndex("CODIGOARTICULO")));
					item.setItem(cur.getInt(cur.getColumnIndex("NUMEROITEM")));
					item.setCantidad(cur.getDouble(cur.getColumnIndex("CANTIDAD")));
					item.setPrecio(cur.getDouble(cur.getColumnIndex("PRECIO")));
					item.setDescuento(cur.getDouble(cur.getColumnIndex("DESCUENTO")));
					items.add(item);
				}
			}
			Sql = "UPDATE PEDIDOSCABECERA SET ESTADO=12 WHERE ESTADO=11 AND NUMERO=" + numero;
			db.execSQL(Sql);
			Sql = "UPDATE PEDIDOSCUERPO SET ESTADO=12 WHERE ESTADO=11 AND NUMERO=" + numero;
			db.execSQL(Sql);			
			return items;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new ExceptionPedido(e.getMessage());
		}
	}
	
	public boolean cambiarCantidadEnitem(double cantidad,double descuento,ItemPedido item){
		try {
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql="UPDATE PEDIDOSCUERPO SET CANTIDAD=" + cantidad + ",DESCUENTO="+descuento+" WHERE NUMERO=" + item.getNumero() + " AND NUMEROITEM=" + item.getItem(); 
			db.execSQL(Sql);
			return true;
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			funcion.MostrarMensajeAceptar(conte, "ERROR AL INTENTAR CAMBIAR LA CANTIDAD DE UN ITEM", 
					"Se ha producido un error al intentar cambiar la cantidad del item " +
					"seleccionado. Error con el dispositivo. Error: " + e.getMessage());
			return false;
		}
	}
	
	public boolean borrarItemPedido(ItemPedido item){
		try {
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql = "UPDATE PEDIDOSCUERPO SET ESTADO=99 WHERE NUMERO=" + item.getNumero() + " AND NUMEROITEM=" + item.getItem();
			db.execSQL(Sql);
			return true;
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			funcion.MostrarMensajeAceptar(conte, "ERROR AL INTENTAR BORRAR UN ITEM", 
					"Se ha producido un error al intentar un item " +
					"seleccionado. Error con el dispositivo. Error: " + e.getMessage());			
			return false;
		}
	}
	
	public void sumarCantidadImpresindibles(int codigoCliente, String codigoArticulo, double cantidad) {
		try {
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql = "UPDATE ARTINDISPENSABLES SET CANTIDADVTA=CANTIDADVTA+" + cantidad + 
					" WHERE CODIGOCLIENTE=" + codigoCliente + " AND CODIGOARTICULO='" + codigoArticulo + "'";
			db.execSQL(Sql);
		} catch (SQLException e) {
			e.printStackTrace();
			funcion.MostrarMensajeAceptar(conte, "ERROR AL INTENTAR CORREGIR DATOS EN ARTICULOS ESPECIALES", 
					" Error con el dispositivo. Error: " + e.getMessage());			
		}
	}
	public void restarCantidadImpresindibles(int codigoCliente, String codigoArticulo, double cantidad) {
		try {
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql = "UPDATE ARTINDISPENSABLES SET CANTIDADVTA=CANTIDADVTA-" + cantidad + 
					" WHERE CODIGOCLIENTE=" + codigoCliente + " AND CODIGOARTICULO='" + codigoArticulo + "'";
			db.execSQL(Sql);
		} catch (SQLException e) {
			e.printStackTrace();
			funcion.MostrarMensajeAceptar(conte, "ERROR AL INTENTAR CORREGIR DATOS EN ARTICULOS ESPECIALES", 
					" Error con el dispositivo. Error: " + e.getMessage());			
		}
	}

	public void sumarCantidadLanzamientos(int codigoCliente, String codigoArticulo, double cantidad) {
		try {
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql = "UPDATE ARTLANZAMIENTOS SET CANTIDADVTA=CANTIDADVTA+" + cantidad + 
					" WHERE CODIGOCLIENTE=" + codigoCliente + " AND CODIGOARTICULO='" + codigoArticulo + "'";
			db.execSQL(Sql);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			funcion.MostrarMensajeAceptar(conte, "ERROR AL INTENTAR CORREGIR DATOS EN ARTICULOS ESPECIALES", 
					" Error con el dispositivo. Error: " + e.getMessage());			
		}
	}
	public void restarCantidadLanzamientos(int codigoCliente, String codigoArticulo, double cantidad) {
		try {
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql = "UPDATE ARTLANZAMIENTOS SET CANTIDADVTA=CANTIDADVTA-" + cantidad + 
					" WHERE CODIGOCLIENTE=" + codigoCliente + " AND CODIGOARTICULO='" + codigoArticulo + "'";
			db.execSQL(Sql);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			funcion.MostrarMensajeAceptar(conte, "ERROR AL INTENTAR CORREGIR DATOS EN ARTICULOS ESPECIALES", 
					" Error con el dispositivo. Error: " + e.getMessage());			
		}
	}
	
	public int buscarCantidadAcumulada(long numero){
			int cantidad=0;
			BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
			SQLiteDatabase db = baseDeDatos.getReadableDatabase();
			String Sql = "SELECT * FROM PEDIDOSCUERPO WHERE NUMERO=" + numero+" AND ESTADO<90";
			Cursor cur = db.rawQuery(Sql, null);
			if (cur.getColumnCount()>0){
				while (cur.moveToNext()){	
					String codigo=cur.getString(cur.getColumnIndex("CODIGOARTICULO"));
					int cant=buscarCombo(Integer.parseInt(codigo));
					if(cant>0){
						cantidad+=cant;
					}else{
						cantidad+=1;
					}
				}
			}	
			return cantidad;
	}
	
	public int buscarCantidadContada(long numero){
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();
		String Sql = "SELECT * FROM PEDIDOSCUERPO WHERE NUMERO=" + numero+" AND ESTADO<90";
		Cursor cur = db.rawQuery(Sql, null);
		return cur.getCount();
}
	
	public int buscarCombo(int codigo){
		int cantidad= 0;
		BaseDeDatos baseDeDatos = new BaseDeDatos(conte, funcion.BaseDeDatos(), null, funcion.Version());
		SQLiteDatabase db = baseDeDatos.getReadableDatabase();	
		String Sql = "SELECT * FROM COMBOS WHERE CODIGO=" + codigo ;
		Cursor cur = db.rawQuery(Sql, null);
		if (cur.getCount()>0){
			while(cur.moveToNext()){
				cantidad= cur.getInt(cur.getColumnIndex("CANTIDAD"));
		     }
		} else {
			cantidad=0;
		}
		return cantidad;
}
	
	


}
